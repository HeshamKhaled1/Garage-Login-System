
testProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  00003d98  00003e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800104  00800104  00003ed0  2**0
                  ALLOC
  3 .stab         00004080  00000000  00000000  00003ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a8d  00000000  00000000  00007f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000099dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d570  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e12b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_1>
       8:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_2>
       c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 f7 1d 	jmp	0x3bee	; 0x3bee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 1a 	call	0x3434	; 0x3434 <main>
      8a:	0c 94 ca 1e 	jmp	0x3d94	; 0x3d94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bb 1e 	jmp	0x3d76	; 0x3d76 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LoginSystem_enuGetDataFromUserByKeypad>:
#include <util/delay.h>



ES_t  LoginSystem_enuGetDataFromUserByKeypad( u8 *Copy_Au8Password)
	{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	63 97       	sbiw	r28, 0x13	; 19
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9b 8b       	std	Y+19, r25	; 0x13
     b5c:	8a 8b       	std	Y+18, r24	; 0x12
		ES_t Local_enuErrorState = ES_NOK;
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	88 8b       	std	Y+16, r24	; 0x10
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;

		LCD_enuJumpCursorTo(2,0);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>

		for (Local_u8Iterator=0; Local_u8Iterator < 4; Local_u8Iterator++)
     b6a:	1f 86       	std	Y+15, r1	; 0x0f
     b6c:	8d c0       	rjmp	.+282    	; 0xc88 <LoginSystem_enuGetDataFromUserByKeypad+0x142>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     b6e:	ce 01       	movw	r24, r28
     b70:	41 96       	adiw	r24, 0x11	; 17
     b72:	0e 94 92 18 	call	0x3124	; 0x3124 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     b76:	89 89       	ldd	r24, Y+17	; 0x11
     b78:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_enuSendData>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a8 ec       	ldi	r26, 0xC8	; 200
     b82:	b2 e4       	ldi	r27, 0x42	; 66
     b84:	8b 87       	std	Y+11, r24	; 0x0b
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	ad 87       	std	Y+13, r26	; 0x0d
     b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b90:	8d 85       	ldd	r24, Y+13	; 0x0d
     b92:	9e 85       	ldd	r25, Y+14	; 0x0e
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4a e7       	ldi	r20, 0x7A	; 122
     b9a:	55 e4       	ldi	r21, 0x45	; 69
     b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	8f 83       	std	Y+7, r24	; 0x07
     ba6:	98 87       	std	Y+8, r25	; 0x08
     ba8:	a9 87       	std	Y+9, r26	; 0x09
     baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bac:	6f 81       	ldd	r22, Y+7	; 0x07
     bae:	78 85       	ldd	r23, Y+8	; 0x08
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	2c f4       	brge	.+10     	; 0xbce <LoginSystem_enuGetDataFromUserByKeypad+0x88>
		__ticks = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9e 83       	std	Y+6, r25	; 0x06
     bca:	8d 83       	std	Y+5, r24	; 0x05
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <LoginSystem_enuGetDataFromUserByKeypad+0x106>
	else if (__tmp > 65535)
     bce:	6f 81       	ldd	r22, Y+7	; 0x07
     bd0:	78 85       	ldd	r23, Y+8	; 0x08
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	4c f5       	brge	.+82     	; 0xc38 <LoginSystem_enuGetDataFromUserByKeypad+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	6b 85       	ldd	r22, Y+11	; 0x0b
     be8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bea:	8d 85       	ldd	r24, Y+13	; 0x0d
     bec:	9e 85       	ldd	r25, Y+14	; 0x0e
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <LoginSystem_enuGetDataFromUserByKeypad+0xe8>
     c10:	80 e9       	ldi	r24, 0x90	; 144
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <LoginSystem_enuGetDataFromUserByKeypad+0xd6>
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	69 f7       	brne	.-38     	; 0xc10 <LoginSystem_enuGetDataFromUserByKeypad+0xca>
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <LoginSystem_enuGetDataFromUserByKeypad+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c38:	6f 81       	ldd	r22, Y+7	; 0x07
     c3a:	78 85       	ldd	r23, Y+8	; 0x08
     c3c:	89 85       	ldd	r24, Y+9	; 0x09
     c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9e 83       	std	Y+6, r25	; 0x06
     c4a:	8d 83       	std	Y+5, r24	; 0x05
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <LoginSystem_enuGetDataFromUserByKeypad+0x112>
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			LCD_enuJumpCursorTo(2,0+Local_u8Iterator);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	6f 85       	ldd	r22, Y+15	; 0x0f
     c64:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
			LCD_enuSendData('*');
     c68:	8a e2       	ldi	r24, 0x2A	; 42
     c6a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	8a 89       	ldd	r24, Y+18	; 0x12
     c76:	9b 89       	ldd	r25, Y+19	; 0x13
     c78:	fc 01       	movw	r30, r24
     c7a:	e2 0f       	add	r30, r18
     c7c:	f3 1f       	adc	r31, r19
     c7e:	89 89       	ldd	r24, Y+17	; 0x11
     c80:	80 83       	st	Z, r24
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;

		LCD_enuJumpCursorTo(2,0);

		for (Local_u8Iterator=0; Local_u8Iterator < 4; Local_u8Iterator++)
     c82:	8f 85       	ldd	r24, Y+15	; 0x0f
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	8f 87       	std	Y+15, r24	; 0x0f
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	84 30       	cpi	r24, 0x04	; 4
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <LoginSystem_enuGetDataFromUserByKeypad+0x14a>
     c8e:	6f cf       	rjmp	.-290    	; 0xb6e <LoginSystem_enuGetDataFromUserByKeypad+0x28>
			LCD_enuJumpCursorTo(2,0+Local_u8Iterator);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[Local_u8Iterator] ='\0';
     c90:	8f 85       	ldd	r24, Y+15	; 0x0f
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	8a 89       	ldd	r24, Y+18	; 0x12
     c98:	9b 89       	ldd	r25, Y+19	; 0x13
     c9a:	fc 01       	movw	r30, r24
     c9c:	e2 0f       	add	r30, r18
     c9e:	f3 1f       	adc	r31, r19
     ca0:	10 82       	st	Z, r1
		Local_enuErrorState = ES_OK;
     ca2:	18 8a       	std	Y+16, r1	; 0x10
		return Local_enuErrorState;
     ca4:	88 89       	ldd	r24, Y+16	; 0x10
	}
     ca6:	63 96       	adiw	r28, 0x13	; 19
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <LoginSystem_u8Strcmp>:

	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <LoginSystem_u8Strcmp+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <LoginSystem_u8Strcmp+0x8>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <LoginSystem_u8Strcmp+0xa>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	9b 83       	std	Y+3, r25	; 0x03
     cc8:	8a 83       	std	Y+2, r24	; 0x02
     cca:	7d 83       	std	Y+5, r23	; 0x05
     ccc:	6c 83       	std	Y+4, r22	; 0x04
		u8 Local_u8Iterator=0;
     cce:	19 82       	std	Y+1, r1	; 0x01
     cd0:	19 c0       	rjmp	.+50     	; 0xd04 <LoginSystem_u8Strcmp+0x4c>
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
		{
			if (Copy_Au8Sring1[Local_u8Iterator]=='\0' || Copy_Au8Sring2[Local_u8Iterator]=='\0')
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	9b 81       	ldd	r25, Y+3	; 0x03
     cdc:	fc 01       	movw	r30, r24
     cde:	e2 0f       	add	r30, r18
     ce0:	f3 1f       	adc	r31, r19
     ce2:	80 81       	ld	r24, Z
     ce4:	88 23       	and	r24, r24
     ce6:	11 f1       	breq	.+68     	; 0xd2c <LoginSystem_u8Strcmp+0x74>
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	fc 01       	movw	r30, r24
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	80 81       	ld	r24, Z
     cfa:	88 23       	and	r24, r24
     cfc:	b9 f0       	breq	.+46     	; 0xd2c <LoginSystem_u8Strcmp+0x74>
				break;
			Local_u8Iterator++;
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	89 83       	std	Y+1, r24	; 0x01
	}

	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	fc 01       	movw	r30, r24
     d10:	e2 0f       	add	r30, r18
     d12:	f3 1f       	adc	r31, r19
     d14:	40 81       	ld	r20, Z
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	8c 81       	ldd	r24, Y+4	; 0x04
     d1e:	9d 81       	ldd	r25, Y+5	; 0x05
     d20:	fc 01       	movw	r30, r24
     d22:	e2 0f       	add	r30, r18
     d24:	f3 1f       	adc	r31, r19
     d26:	80 81       	ld	r24, Z
     d28:	48 17       	cp	r20, r24
     d2a:	99 f2       	breq	.-90     	; 0xcd2 <LoginSystem_u8Strcmp+0x1a>
			if (Copy_Au8Sring1[Local_u8Iterator]=='\0' || Copy_Au8Sring2[Local_u8Iterator]=='\0')
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]=='\0' && Copy_Au8Sring2[Local_u8Iterator]=='\0')
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	9b 81       	ldd	r25, Y+3	; 0x03
     d36:	fc 01       	movw	r30, r24
     d38:	e2 0f       	add	r30, r18
     d3a:	f3 1f       	adc	r31, r19
     d3c:	80 81       	ld	r24, Z
     d3e:	88 23       	and	r24, r24
     d40:	71 f4       	brne	.+28     	; 0xd5e <LoginSystem_u8Strcmp+0xa6>
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	fc 01       	movw	r30, r24
     d4e:	e2 0f       	add	r30, r18
     d50:	f3 1f       	adc	r31, r19
     d52:	80 81       	ld	r24, Z
     d54:	88 23       	and	r24, r24
     d56:	19 f4       	brne	.+6      	; 0xd5e <LoginSystem_u8Strcmp+0xa6>
			return 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	8e 83       	std	Y+6, r24	; 0x06
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <LoginSystem_u8Strcmp+0xa8>
		else
			return 0;
     d5e:	1e 82       	std	Y+6, r1	; 0x06
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
	}
     d62:	26 96       	adiw	r28, 0x06	; 6
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <GIE_enuInit>:
#include "../../LIBRARIES/errorstate.h"

#include "GIE_priv.h"

ES_t GIE_enuInit(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErorrState = ES_NOK ;
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	89 83       	std	Y+1, r24	; 0x01

	SREG &= ~(1<<7);
     d82:	af e5       	ldi	r26, 0x5F	; 95
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ef e5       	ldi	r30, 0x5F	; 95
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 77       	andi	r24, 0x7F	; 127
     d8e:	8c 93       	st	X, r24

	Local_ErorrState = ES_OK;
     d90:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErorrState;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
}
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <GIE_enuEnable>:
ES_t GIE_enuEnable(void)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErorrState = ES_NOK ;
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	89 83       	std	Y+1, r24	; 0x01

	SREG |= (1<<7);
     daa:	af e5       	ldi	r26, 0x5F	; 95
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ef e5       	ldi	r30, 0x5F	; 95
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	8c 93       	st	X, r24

	Local_ErorrState = ES_OK;
     db8:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErorrState;
     dba:	89 81       	ldd	r24, Y+1	; 0x01
}
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	0f 92       	push	r0
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErorrState = ES_NOK ;
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	89 83       	std	Y+1, r24	; 0x01

	SREG &= ~(1<<7);
     dd2:	af e5       	ldi	r26, 0x5F	; 95
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ef e5       	ldi	r30, 0x5F	; 95
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	8c 93       	st	X, r24

	Local_ErorrState = ES_OK;
     de0:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErorrState;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
}
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <EXTI_enuInit>:
static volatile void (* EXTI_pfunISR_fun0) (void) = NULL;
static volatile void (* EXTI_pfunISR_fun1) (void) = NULL;
static volatile void (* EXTI_pfunISR_fun2) (void) = NULL;

ES_t EXTI_enuInit(EXTI_T * Copy_AstrEXTI_CONFIG)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	29 97       	sbiw	r28, 0x09	; 9
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	9b 83       	std	Y+3, r25	; 0x03
     e02:	8a 83       	std	Y+2, r24	; 0x02
ES_t Local_enuErrorState = ES_NOK ;
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	89 83       	std	Y+1, r24	; 0x01
///////////////////////////////////////////////////////////////////////////////

if(Copy_AstrEXTI_CONFIG[INT0].Interrupt_State == ENABELED) //make sure the interrupt state is enabled 
     e08:	ea 81       	ldd	r30, Y+2	; 0x02
     e0a:	fb 81       	ldd	r31, Y+3	; 0x03
     e0c:	80 81       	ld	r24, Z
     e0e:	88 23       	and	r24, r24
     e10:	09 f0       	breq	.+2      	; 0xe14 <EXTI_enuInit+0x28>
     e12:	59 c0       	rjmp	.+178    	; 0xec6 <EXTI_enuInit+0xda>
{
			GICR |= (1<<6); // for interrupt 0
     e14:	ab e5       	ldi	r26, 0x5B	; 91
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	eb e5       	ldi	r30, 0x5B	; 91
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	8c 93       	st	X, r24

		switch(Copy_AstrEXTI_CONFIG[INT0].INT_Sense_Level)
     e22:	ea 81       	ldd	r30, Y+2	; 0x02
     e24:	fb 81       	ldd	r31, Y+3	; 0x03
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	39 87       	std	Y+9, r19	; 0x09
     e2e:	28 87       	std	Y+8, r18	; 0x08
     e30:	88 85       	ldd	r24, Y+8	; 0x08
     e32:	99 85       	ldd	r25, Y+9	; 0x09
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 05       	cpc	r25, r1
     e38:	e9 f0       	breq	.+58     	; 0xe74 <EXTI_enuInit+0x88>
     e3a:	28 85       	ldd	r18, Y+8	; 0x08
     e3c:	39 85       	ldd	r19, Y+9	; 0x09
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	2c f4       	brge	.+10     	; 0xe4e <EXTI_enuInit+0x62>
     e44:	88 85       	ldd	r24, Y+8	; 0x08
     e46:	99 85       	ldd	r25, Y+9	; 0x09
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f0       	breq	.+24     	; 0xe64 <EXTI_enuInit+0x78>
     e4c:	39 c0       	rjmp	.+114    	; 0xec0 <EXTI_enuInit+0xd4>
     e4e:	28 85       	ldd	r18, Y+8	; 0x08
     e50:	39 85       	ldd	r19, Y+9	; 0x09
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	31 05       	cpc	r19, r1
     e56:	e9 f0       	breq	.+58     	; 0xe92 <EXTI_enuInit+0xa6>
     e58:	88 85       	ldd	r24, Y+8	; 0x08
     e5a:	99 85       	ldd	r25, Y+9	; 0x09
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	91 05       	cpc	r25, r1
     e60:	39 f1       	breq	.+78     	; 0xeb0 <EXTI_enuInit+0xc4>
     e62:	2e c0       	rjmp	.+92     	; 0xec0 <EXTI_enuInit+0xd4>
		{
		case LOW_LEVEL:

			MCUCR &= ~(3<<0);	//mask bit 0,1
     e64:	a5 e5       	ldi	r26, 0x55	; 85
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e5       	ldi	r30, 0x55	; 85
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8c 7f       	andi	r24, 0xFC	; 252
     e70:	8c 93       	st	X, r24
     e72:	35 c0       	rjmp	.+106    	; 0xede <EXTI_enuInit+0xf2>
			break;
		case ANY_LOGICAL:

			MCUCR |= (1<<0);	//set bit 0
     e74:	a5 e5       	ldi	r26, 0x55	; 85
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e5 e5       	ldi	r30, 0x55	; 85
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	81 60       	ori	r24, 0x01	; 1
     e80:	8c 93       	st	X, r24

			MCUCR &= ~(1<<1);	//mask bit 1
     e82:	a5 e5       	ldi	r26, 0x55	; 85
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e5 e5       	ldi	r30, 0x55	; 85
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8d 7f       	andi	r24, 0xFD	; 253
     e8e:	8c 93       	st	X, r24
     e90:	26 c0       	rjmp	.+76     	; 0xede <EXTI_enuInit+0xf2>

			break;
		case FALLING:

			MCUCR &= ~(1<<0);	//mask bit 0
     e92:	a5 e5       	ldi	r26, 0x55	; 85
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e5 e5       	ldi	r30, 0x55	; 85
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8e 7f       	andi	r24, 0xFE	; 254
     e9e:	8c 93       	st	X, r24

			MCUCR |= (1<<1);	//set bit 1
     ea0:	a5 e5       	ldi	r26, 0x55	; 85
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e5 e5       	ldi	r30, 0x55	; 85
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	8c 93       	st	X, r24
     eae:	17 c0       	rjmp	.+46     	; 0xede <EXTI_enuInit+0xf2>

			break;
		case RISING:

			MCUCR |= (3<<0);	//set bit 0,1
     eb0:	a5 e5       	ldi	r26, 0x55	; 85
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e5       	ldi	r30, 0x55	; 85
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	83 60       	ori	r24, 0x03	; 3
     ebc:	8c 93       	st	X, r24
     ebe:	0f c0       	rjmp	.+30     	; 0xede <EXTI_enuInit+0xf2>

			break;
		default :
			Local_enuErrorState =ES_OUT_OF_RANGE;
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	0c c0       	rjmp	.+24     	; 0xede <EXTI_enuInit+0xf2>

		}
}

	else if(Copy_AstrEXTI_CONFIG[INT0].Interrupt_State == DISABELED)
     ec6:	ea 81       	ldd	r30, Y+2	; 0x02
     ec8:	fb 81       	ldd	r31, Y+3	; 0x03
     eca:	80 81       	ld	r24, Z
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	39 f4       	brne	.+14     	; 0xede <EXTI_enuInit+0xf2>
		{
			GICR &= ~(1<<6);
     ed0:	ab e5       	ldi	r26, 0x5B	; 91
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	eb e5       	ldi	r30, 0x5B	; 91
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7b       	andi	r24, 0xBF	; 191
     edc:	8c 93       	st	X, r24
		}

/////////////////////////////////////////////////////////////////////////////////////////
if(Copy_AstrEXTI_CONFIG[INT1].Interrupt_State == ENABELED)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
     ee2:	fc 01       	movw	r30, r24
     ee4:	32 96       	adiw	r30, 0x02	; 2
     ee6:	80 81       	ld	r24, Z
     ee8:	88 23       	and	r24, r24
     eea:	09 f0       	breq	.+2      	; 0xeee <EXTI_enuInit+0x102>
     eec:	5b c0       	rjmp	.+182    	; 0xfa4 <EXTI_enuInit+0x1b8>
{
			GICR |= (1<<7); // for interrupt 1
     eee:	ab e5       	ldi	r26, 0x5B	; 91
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e5       	ldi	r30, 0x5B	; 91
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	8c 93       	st	X, r24

			switch(Copy_AstrEXTI_CONFIG[INT1].INT_Sense_Level)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	fc 01       	movw	r30, r24
     f02:	32 96       	adiw	r30, 0x02	; 2
     f04:	81 81       	ldd	r24, Z+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3f 83       	std	Y+7, r19	; 0x07
     f0c:	2e 83       	std	Y+6, r18	; 0x06
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	e9 f0       	breq	.+58     	; 0xf52 <EXTI_enuInit+0x166>
     f18:	2e 81       	ldd	r18, Y+6	; 0x06
     f1a:	3f 81       	ldd	r19, Y+7	; 0x07
     f1c:	22 30       	cpi	r18, 0x02	; 2
     f1e:	31 05       	cpc	r19, r1
     f20:	2c f4       	brge	.+10     	; 0xf2c <EXTI_enuInit+0x140>
     f22:	8e 81       	ldd	r24, Y+6	; 0x06
     f24:	9f 81       	ldd	r25, Y+7	; 0x07
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	61 f0       	breq	.+24     	; 0xf42 <EXTI_enuInit+0x156>
     f2a:	39 c0       	rjmp	.+114    	; 0xf9e <EXTI_enuInit+0x1b2>
     f2c:	2e 81       	ldd	r18, Y+6	; 0x06
     f2e:	3f 81       	ldd	r19, Y+7	; 0x07
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	e9 f0       	breq	.+58     	; 0xf70 <EXTI_enuInit+0x184>
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	9f 81       	ldd	r25, Y+7	; 0x07
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	39 f1       	breq	.+78     	; 0xf8e <EXTI_enuInit+0x1a2>
     f40:	2e c0       	rjmp	.+92     	; 0xf9e <EXTI_enuInit+0x1b2>
					{
					case LOW_LEVEL:

						MCUCR &= ~(3<<2);
     f42:	a5 e5       	ldi	r26, 0x55	; 85
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e5       	ldi	r30, 0x55	; 85
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	83 7f       	andi	r24, 0xF3	; 243
     f4e:	8c 93       	st	X, r24
     f50:	35 c0       	rjmp	.+106    	; 0xfbc <EXTI_enuInit+0x1d0>

						break;
					case ANY_LOGICAL:

						MCUCR |= (1<<2);
     f52:	a5 e5       	ldi	r26, 0x55	; 85
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e5       	ldi	r30, 0x55	; 85
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	84 60       	ori	r24, 0x04	; 4
     f5e:	8c 93       	st	X, r24

						MCUCR &= ~(1<<3);
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	87 7f       	andi	r24, 0xF7	; 247
     f6c:	8c 93       	st	X, r24
     f6e:	26 c0       	rjmp	.+76     	; 0xfbc <EXTI_enuInit+0x1d0>
						break;
					case FALLING:

						MCUCR &= ~(1<<2);
     f70:	a5 e5       	ldi	r26, 0x55	; 85
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e5       	ldi	r30, 0x55	; 85
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8b 7f       	andi	r24, 0xFB	; 251
     f7c:	8c 93       	st	X, r24

						MCUCR |= (1<<3);
     f7e:	a5 e5       	ldi	r26, 0x55	; 85
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e5       	ldi	r30, 0x55	; 85
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 60       	ori	r24, 0x08	; 8
     f8a:	8c 93       	st	X, r24
     f8c:	17 c0       	rjmp	.+46     	; 0xfbc <EXTI_enuInit+0x1d0>
						break;
					case RISING:

						MCUCR |= (3<<2);
     f8e:	a5 e5       	ldi	r26, 0x55	; 85
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e5 e5       	ldi	r30, 0x55	; 85
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8c 60       	ori	r24, 0x0C	; 12
     f9a:	8c 93       	st	X, r24
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <EXTI_enuInit+0x1d0>

						break;
					default :
						Local_enuErrorState =ES_OUT_OF_RANGE;
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	0c c0       	rjmp	.+24     	; 0xfbc <EXTI_enuInit+0x1d0>

					}
}
////////////////////////////////////////////////////////////////////////////////////////////////
		else if(Copy_AstrEXTI_CONFIG[INT0].Interrupt_State == DISABELED)
     fa4:	ea 81       	ldd	r30, Y+2	; 0x02
     fa6:	fb 81       	ldd	r31, Y+3	; 0x03
     fa8:	80 81       	ld	r24, Z
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	39 f4       	brne	.+14     	; 0xfbc <EXTI_enuInit+0x1d0>
		{
			GICR &= ~(1<<7);
     fae:	ab e5       	ldi	r26, 0x5B	; 91
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e5       	ldi	r30, 0x5B	; 91
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 77       	andi	r24, 0x7F	; 127
     fba:	8c 93       	st	X, r24
		}
///////////////////////////////////////////////////////////////////////////////////////////////
if(Copy_AstrEXTI_CONFIG[INT2].Interrupt_State == ENABELED)
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	9b 81       	ldd	r25, Y+3	; 0x03
     fc0:	fc 01       	movw	r30, r24
     fc2:	34 96       	adiw	r30, 0x04	; 4
     fc4:	80 81       	ld	r24, Z
     fc6:	88 23       	and	r24, r24
     fc8:	71 f5       	brne	.+92     	; 0x1026 <EXTI_enuInit+0x23a>
{
			GICR |= (1<<5); // for interrupt 0
     fca:	ab e5       	ldi	r26, 0x5B	; 91
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e5       	ldi	r30, 0x5B	; 91
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 62       	ori	r24, 0x20	; 32
     fd6:	8c 93       	st	X, r24
			switch(Copy_AstrEXTI_CONFIG[INT2].INT_Sense_Level)
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	fc 01       	movw	r30, r24
     fde:	34 96       	adiw	r30, 0x04	; 4
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3d 83       	std	Y+5, r19	; 0x05
     fe8:	2c 83       	std	Y+4, r18	; 0x04
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	31 f0       	breq	.+12     	; 0x1000 <EXTI_enuInit+0x214>
     ff4:	2c 81       	ldd	r18, Y+4	; 0x04
     ff6:	3d 81       	ldd	r19, Y+5	; 0x05
     ff8:	23 30       	cpi	r18, 0x03	; 3
     ffa:	31 05       	cpc	r19, r1
     ffc:	49 f0       	breq	.+18     	; 0x1010 <EXTI_enuInit+0x224>
     ffe:	10 c0       	rjmp	.+32     	; 0x1020 <EXTI_enuInit+0x234>
				{
					case FALLING:

						MCUCSR &= ~(1<<6);
    1000:	a4 e5       	ldi	r26, 0x54	; 84
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e4 e5       	ldi	r30, 0x54	; 84
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 7b       	andi	r24, 0xBF	; 191
    100c:	8c 93       	st	X, r24
    100e:	19 c0       	rjmp	.+50     	; 0x1042 <EXTI_enuInit+0x256>
						break;
					case RISING:

						MCUCSR |= (1<<6);
    1010:	a4 e5       	ldi	r26, 0x54	; 84
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e4 e5       	ldi	r30, 0x54	; 84
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 64       	ori	r24, 0x40	; 64
    101c:	8c 93       	st	X, r24
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <EXTI_enuInit+0x256>
						break;
					default :
						Local_enuErrorState =ES_OUT_OF_RANGE;
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <EXTI_enuInit+0x256>

				}
}
/////////////////////////////////////////////////////////////////////////////////////
		else if(Copy_AstrEXTI_CONFIG[INT2].Interrupt_State == DISABELED)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	fc 01       	movw	r30, r24
    102c:	34 96       	adiw	r30, 0x04	; 4
    102e:	80 81       	ld	r24, Z
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	39 f4       	brne	.+14     	; 0x1042 <EXTI_enuInit+0x256>
		{
			GICR &= ~(1<<5);
    1034:	ab e5       	ldi	r26, 0x5B	; 91
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e5       	ldi	r30, 0x5B	; 91
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8f 7d       	andi	r24, 0xDF	; 223
    1040:	8c 93       	st	X, r24
		}

return Local_enuErrorState;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
}
    1044:	29 96       	adiw	r28, 0x09	; 9
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel(u8 Copy_u8InterruptNum , u8 Copy_u8SenseLevel)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	29 97       	sbiw	r28, 0x09	; 9
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	6b 83       	std	Y+3, r22	; 0x03
ES_t Local_enuErrorState = ES_NOK ;
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	89 83       	std	Y+1, r24	; 0x01

if(Copy_u8InterruptNum == INT0)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	88 23       	and	r24, r24
    1076:	09 f0       	breq	.+2      	; 0x107a <EXTI_enuSetSenseLevel+0x24>
    1078:	53 c0       	rjmp	.+166    	; 0x1120 <EXTI_enuSetSenseLevel+0xca>
{

		switch(Copy_u8SenseLevel)
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	39 87       	std	Y+9, r19	; 0x09
    1082:	28 87       	std	Y+8, r18	; 0x08
    1084:	88 85       	ldd	r24, Y+8	; 0x08
    1086:	99 85       	ldd	r25, Y+9	; 0x09
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	f1 f0       	breq	.+60     	; 0x10ca <EXTI_enuSetSenseLevel+0x74>
    108e:	28 85       	ldd	r18, Y+8	; 0x08
    1090:	39 85       	ldd	r19, Y+9	; 0x09
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	2c f4       	brge	.+10     	; 0x10a2 <EXTI_enuSetSenseLevel+0x4c>
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	99 85       	ldd	r25, Y+9	; 0x09
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	61 f0       	breq	.+24     	; 0x10b8 <EXTI_enuSetSenseLevel+0x62>
    10a0:	3d c0       	rjmp	.+122    	; 0x111c <EXTI_enuSetSenseLevel+0xc6>
    10a2:	28 85       	ldd	r18, Y+8	; 0x08
    10a4:	39 85       	ldd	r19, Y+9	; 0x09
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	f9 f0       	breq	.+62     	; 0x10ea <EXTI_enuSetSenseLevel+0x94>
    10ac:	88 85       	ldd	r24, Y+8	; 0x08
    10ae:	99 85       	ldd	r25, Y+9	; 0x09
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	51 f1       	breq	.+84     	; 0x110a <EXTI_enuSetSenseLevel+0xb4>
    10b6:	32 c0       	rjmp	.+100    	; 0x111c <EXTI_enuSetSenseLevel+0xc6>
		{
		case LOW_LEVEL:

			MCUCR &= ~(3<<0);	//mask bit 0,1
    10b8:	a5 e5       	ldi	r26, 0x55	; 85
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e5       	ldi	r30, 0x55	; 85
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8c 7f       	andi	r24, 0xFC	; 252
    10c4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	2b c0       	rjmp	.+86     	; 0x1120 <EXTI_enuSetSenseLevel+0xca>
			break;
		case ANY_LOGICAL:

			MCUCR |= (1<<0);	//set bit 0
    10ca:	a5 e5       	ldi	r26, 0x55	; 85
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e5       	ldi	r30, 0x55	; 85
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	8c 93       	st	X, r24

			MCUCR &= ~(1<<1);	//mask bit 1
    10d8:	a5 e5       	ldi	r26, 0x55	; 85
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e5       	ldi	r30, 0x55	; 85
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8d 7f       	andi	r24, 0xFD	; 253
    10e4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	1b c0       	rjmp	.+54     	; 0x1120 <EXTI_enuSetSenseLevel+0xca>

			break;
		case FALLING:

			MCUCR &= ~(1<<0);	//mask bit 0
    10ea:	a5 e5       	ldi	r26, 0x55	; 85
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e5       	ldi	r30, 0x55	; 85
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8e 7f       	andi	r24, 0xFE	; 254
    10f6:	8c 93       	st	X, r24

			MCUCR |= (1<<1);	//set bit 1
    10f8:	a5 e5       	ldi	r26, 0x55	; 85
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e5       	ldi	r30, 0x55	; 85
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	82 60       	ori	r24, 0x02	; 2
    1104:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1106:	19 82       	std	Y+1, r1	; 0x01
    1108:	0b c0       	rjmp	.+22     	; 0x1120 <EXTI_enuSetSenseLevel+0xca>

			break;
		case RISING:

			MCUCR |= (3<<0);	//set bit 0,1
    110a:	a5 e5       	ldi	r26, 0x55	; 85
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e5       	ldi	r30, 0x55	; 85
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	83 60       	ori	r24, 0x03	; 3
    1116:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1118:	19 82       	std	Y+1, r1	; 0x01
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <EXTI_enuSetSenseLevel+0xca>

			break;

		default :
			Local_enuErrorState =ES_OUT_OF_RANGE;
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	89 83       	std	Y+1, r24	; 0x01

		}
}

if(Copy_u8InterruptNum == INT1)
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	09 f0       	breq	.+2      	; 0x1128 <EXTI_enuSetSenseLevel+0xd2>
    1126:	53 c0       	rjmp	.+166    	; 0x11ce <EXTI_enuSetSenseLevel+0x178>
{

		switch(Copy_u8SenseLevel)
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3f 83       	std	Y+7, r19	; 0x07
    1130:	2e 83       	std	Y+6, r18	; 0x06
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	f1 f0       	breq	.+60     	; 0x1178 <EXTI_enuSetSenseLevel+0x122>
    113c:	2e 81       	ldd	r18, Y+6	; 0x06
    113e:	3f 81       	ldd	r19, Y+7	; 0x07
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	2c f4       	brge	.+10     	; 0x1150 <EXTI_enuSetSenseLevel+0xfa>
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	61 f0       	breq	.+24     	; 0x1166 <EXTI_enuSetSenseLevel+0x110>
    114e:	3d c0       	rjmp	.+122    	; 0x11ca <EXTI_enuSetSenseLevel+0x174>
    1150:	2e 81       	ldd	r18, Y+6	; 0x06
    1152:	3f 81       	ldd	r19, Y+7	; 0x07
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	f9 f0       	breq	.+62     	; 0x1198 <EXTI_enuSetSenseLevel+0x142>
    115a:	8e 81       	ldd	r24, Y+6	; 0x06
    115c:	9f 81       	ldd	r25, Y+7	; 0x07
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	51 f1       	breq	.+84     	; 0x11b8 <EXTI_enuSetSenseLevel+0x162>
    1164:	32 c0       	rjmp	.+100    	; 0x11ca <EXTI_enuSetSenseLevel+0x174>
		{
		case LOW_LEVEL:
		{
			MCUCR &= ~(3<<2);	//mask bit 2,3
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	83 7f       	andi	r24, 0xF3	; 243
    1172:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	2b c0       	rjmp	.+86     	; 0x11ce <EXTI_enuSetSenseLevel+0x178>
		}
		break;
		case ANY_LOGICAL:
		{
			MCUCR |= (1<<2);	//set bit 2
    1178:	a5 e5       	ldi	r26, 0x55	; 85
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e5       	ldi	r30, 0x55	; 85
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	8c 93       	st	X, r24

			MCUCR &= ~(1<<3);	//mask bit 3
    1186:	a5 e5       	ldi	r26, 0x55	; 85
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e5       	ldi	r30, 0x55	; 85
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	87 7f       	andi	r24, 0xF7	; 247
    1192:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1194:	19 82       	std	Y+1, r1	; 0x01
    1196:	1b c0       	rjmp	.+54     	; 0x11ce <EXTI_enuSetSenseLevel+0x178>
		}
			break;
		case FALLING:
		{
			MCUCR &= ~(1<<2);	//mask bit 2
    1198:	a5 e5       	ldi	r26, 0x55	; 85
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e5       	ldi	r30, 0x55	; 85
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24

			MCUCR |= (1<<3);	//set bit 3
    11a6:	a5 e5       	ldi	r26, 0x55	; 85
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e5       	ldi	r30, 0x55	; 85
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	88 60       	ori	r24, 0x08	; 8
    11b2:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <EXTI_enuSetSenseLevel+0x178>
		}
			break;
		case RISING:
		{
			MCUCR |= (3<<2);	//set bit 2,3
    11b8:	a5 e5       	ldi	r26, 0x55	; 85
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e5       	ldi	r30, 0x55	; 85
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8c 60       	ori	r24, 0x0C	; 12
    11c4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    11c6:	19 82       	std	Y+1, r1	; 0x01
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <EXTI_enuSetSenseLevel+0x178>
		}
			break;

		default :
			Local_enuErrorState =ES_OUT_OF_RANGE;
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	89 83       	std	Y+1, r24	; 0x01

		}
}


if(Copy_u8InterruptNum == INT2)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	21 f5       	brne	.+72     	; 0x121c <EXTI_enuSetSenseLevel+0x1c6>
{

		switch(Copy_u8SenseLevel)
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3d 83       	std	Y+5, r19	; 0x05
    11dc:	2c 83       	std	Y+4, r18	; 0x04
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <EXTI_enuSetSenseLevel+0x19e>
    11e8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ea:	3d 81       	ldd	r19, Y+5	; 0x05
    11ec:	23 30       	cpi	r18, 0x03	; 3
    11ee:	31 05       	cpc	r19, r1
    11f0:	51 f0       	breq	.+20     	; 0x1206 <EXTI_enuSetSenseLevel+0x1b0>
    11f2:	12 c0       	rjmp	.+36     	; 0x1218 <EXTI_enuSetSenseLevel+0x1c2>
		{
		case FALLING:
		{
			MCUCSR &= ~(1<<6);	//mask bit 6
    11f4:	a4 e5       	ldi	r26, 0x54	; 84
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e4 e5       	ldi	r30, 0x54	; 84
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7b       	andi	r24, 0xBF	; 191
    1200:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1202:	19 82       	std	Y+1, r1	; 0x01
    1204:	0b c0       	rjmp	.+22     	; 0x121c <EXTI_enuSetSenseLevel+0x1c6>
		}
			break;
		case RISING:
		{
			MCUCSR |= (1<<6);	//set bit 6
    1206:	a4 e5       	ldi	r26, 0x54	; 84
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e4 e5       	ldi	r30, 0x54	; 84
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1214:	19 82       	std	Y+1, r1	; 0x01
    1216:	02 c0       	rjmp	.+4      	; 0x121c <EXTI_enuSetSenseLevel+0x1c6>
		}
			break;

		default :
			Local_enuErrorState =ES_OUT_OF_RANGE;
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	89 83       	std	Y+1, r24	; 0x01

		}
}

return Local_enuErrorState;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}
    121e:	29 96       	adiw	r28, 0x09	; 9
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt(u8 Copy_u8InterruptNum)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <EXTI_enuEnableInterrupt+0x6>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <EXTI_enuEnableInterrupt+0x8>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	8a 83       	std	Y+2, r24	; 0x02
ES_t Local_enuErrorState = ES_NOK ;
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptNum)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3c 83       	std	Y+4, r19	; 0x04
    124a:	2b 83       	std	Y+3, r18	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	91 f0       	breq	.+36     	; 0x127a <EXTI_enuEnableInterrupt+0x4a>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	b1 f0       	breq	.+44     	; 0x128c <EXTI_enuEnableInterrupt+0x5c>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	d9 f4       	brne	.+54     	; 0x129e <EXTI_enuEnableInterrupt+0x6e>
	{
	case INT0:

		GICR |= (1<<6);
    1268:	ab e5       	ldi	r26, 0x5B	; 91
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	eb e5       	ldi	r30, 0x5B	; 91
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 64       	ori	r24, 0x40	; 64
    1274:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1276:	19 82       	std	Y+1, r1	; 0x01
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <EXTI_enuEnableInterrupt+0x72>
		break;
	case INT1:

		GICR |= (1<<7);
    127a:	ab e5       	ldi	r26, 0x5B	; 91
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e5       	ldi	r30, 0x5B	; 91
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1288:	19 82       	std	Y+1, r1	; 0x01
    128a:	0b c0       	rjmp	.+22     	; 0x12a2 <EXTI_enuEnableInterrupt+0x72>
		break;
	case INT2:

		GICR |= (1<<5);
    128c:	ab e5       	ldi	r26, 0x5B	; 91
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e5       	ldi	r30, 0x5B	; 91
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	80 62       	ori	r24, 0x20	; 32
    1298:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <EXTI_enuEnableInterrupt+0x72>
		break;
	default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_enuErrorState;
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt(u8 Copy_u8InterruptNum)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <EXTI_enuDisableInterrupt+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <EXTI_enuDisableInterrupt+0x8>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	8a 83       	std	Y+2, r24	; 0x02
ES_t Local_enuErrorState = ES_NOK ;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8InterruptNum)
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3c 83       	std	Y+4, r19	; 0x04
    12cc:	2b 83       	std	Y+3, r18	; 0x03
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	91 f0       	breq	.+36     	; 0x12fc <EXTI_enuDisableInterrupt+0x4a>
    12d8:	2b 81       	ldd	r18, Y+3	; 0x03
    12da:	3c 81       	ldd	r19, Y+4	; 0x04
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	b1 f0       	breq	.+44     	; 0x130e <EXTI_enuDisableInterrupt+0x5c>
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	d9 f4       	brne	.+54     	; 0x1320 <EXTI_enuDisableInterrupt+0x6e>
	{
	case INT0:

		GICR &= ~(1<<6);
    12ea:	ab e5       	ldi	r26, 0x5B	; 91
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e5       	ldi	r30, 0x5B	; 91
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 7b       	andi	r24, 0xBF	; 191
    12f6:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    12f8:	19 82       	std	Y+1, r1	; 0x01
    12fa:	14 c0       	rjmp	.+40     	; 0x1324 <EXTI_enuDisableInterrupt+0x72>
		break;
	case INT1:

		GICR &= ~(1<<7);
    12fc:	ab e5       	ldi	r26, 0x5B	; 91
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	eb e5       	ldi	r30, 0x5B	; 91
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 77       	andi	r24, 0x7F	; 127
    1308:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    130a:	19 82       	std	Y+1, r1	; 0x01
    130c:	0b c0       	rjmp	.+22     	; 0x1324 <EXTI_enuDisableInterrupt+0x72>
		break;
	case INT2:

		GICR &= ~(1<<5);
    130e:	ab e5       	ldi	r26, 0x5B	; 91
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e5       	ldi	r30, 0x5B	; 91
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7d       	andi	r24, 0xDF	; 223
    131a:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    131c:	19 82       	std	Y+1, r1	; 0x01
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <EXTI_enuDisableInterrupt+0x72>
		break;
	default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	89 83       	std	Y+1, r24	; 0x01
	}

return Local_enuErrorState;
    1324:	89 81       	ldd	r24, Y+1	; 0x01
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void  (* pfunAppFunction)(void),u8 Copy_u8InterruptNum)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <EXTI_enuCallBack+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <EXTI_enuCallBack+0x8>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	9b 83       	std	Y+3, r25	; 0x03
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	6c 83       	std	Y+4, r22	; 0x04
ES_t Local_enuErrorState = ES_NOK ;
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	89 83       	std	Y+1, r24	; 0x01

	if(pfunAppFunction != NULL)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	f9 f0       	breq	.+62     	; 0x1390 <EXTI_enuCallBack+0x5c>
	{
		if(Copy_u8InterruptNum == 0) //if valid interrupt number
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	88 23       	and	r24, r24
    1356:	39 f4       	brne	.+14     	; 0x1366 <EXTI_enuCallBack+0x32>
		{
			EXTI_pfunISR_fun0 = pfunAppFunction;
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	90 93 05 01 	sts	0x0105, r25
    1360:	80 93 04 01 	sts	0x0104, r24

			Local_enuErrorState = ES_OK;
    1364:	19 82       	std	Y+1, r1	; 0x01
		}
		if(Copy_u8InterruptNum == 1) //if valid interrupt number
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	39 f4       	brne	.+14     	; 0x137a <EXTI_enuCallBack+0x46>
		{
			EXTI_pfunISR_fun1 = pfunAppFunction;
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	9b 81       	ldd	r25, Y+3	; 0x03
    1370:	90 93 07 01 	sts	0x0107, r25
    1374:	80 93 06 01 	sts	0x0106, r24

			Local_enuErrorState = ES_OK;
    1378:	19 82       	std	Y+1, r1	; 0x01
		}
		if(Copy_u8InterruptNum == 2) //if valid interrupt number
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	51 f4       	brne	.+20     	; 0x1394 <EXTI_enuCallBack+0x60>
		{
			EXTI_pfunISR_fun2 = pfunAppFunction;
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	9b 81       	ldd	r25, Y+3	; 0x03
    1384:	90 93 09 01 	sts	0x0109, r25
    1388:	80 93 08 01 	sts	0x0108, r24

			Local_enuErrorState = ES_OK;
    138c:	19 82       	std	Y+1, r1	; 0x01
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <EXTI_enuCallBack+0x60>
		}
	}
	else
	{
		Local_enuErrorState = ES_POINTER_TO_VOID;
    1390:	84 e0       	ldi	r24, 0x04	; 4
    1392:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <__vector_1>:


ISR(VECT_INT0)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISR_fun0 != NULL)
    13ce:	80 91 04 01 	lds	r24, 0x0104
    13d2:	90 91 05 01 	lds	r25, 0x0105
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <__vector_1+0x40>
	{
		EXTI_pfunISR_fun0 ();
    13da:	e0 91 04 01 	lds	r30, 0x0104
    13de:	f0 91 05 01 	lds	r31, 0x0105
    13e2:	09 95       	icall
	}
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_2>:



ISR(VECT_INT1)
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISR_fun1!= NULL)
    1434:	80 91 06 01 	lds	r24, 0x0106
    1438:	90 91 07 01 	lds	r25, 0x0107
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	29 f0       	breq	.+10     	; 0x144a <__vector_2+0x40>
	{
		EXTI_pfunISR_fun1 ();
    1440:	e0 91 06 01 	lds	r30, 0x0106
    1444:	f0 91 07 01 	lds	r31, 0x0107
    1448:	09 95       	icall
	}
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_3>:
ISR(VECT_INT2)
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISR_fun2 != NULL)
    149a:	80 91 08 01 	lds	r24, 0x0108
    149e:	90 91 09 01 	lds	r25, 0x0109
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <__vector_3+0x40>
	{
		EXTI_pfunISR_fun2();
    14a6:	e0 91 08 01 	lds	r30, 0x0108
    14aa:	f0 91 09 01 	lds	r31, 0x0109
    14ae:	09 95       	icall
	}
}
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <DIO_enuInit>:
#include "../../LIBRARIES/stdTypes.h"
#include "../../LIBRARIES/errorstate.h"


ES_t DIO_enuInit(void)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	/* not used in real projects but implemented here as a practice of driver architecture  */
	ES_t Local_enuErrorStatus = ES_NOK;
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(DIO_u8PA7_DIR , DIO_u8PA6_DIR , DIO_u8PA5_DIR , DIO_u8PA4_DIR , DIO_u8PA3_DIR , DIO_u8PA2_DIR , DIO_u8PA1_DIR , DIO_u8PA0_DIR);
    14e4:	ea e3       	ldi	r30, 0x3A	; 58
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	85 e5       	ldi	r24, 0x55	; 85
    14ea:	80 83       	st	Z, r24
	PORTA = CONC(DIO_u8PA7_VALUE , DIO_u8PA6_VALUE , DIO_u8PA5_VALUE , DIO_u8PA4_VALUE , DIO_u8PA3_VALUE , DIO_u8PA2_VALUE , DIO_u8PA1_VALUE , DIO_u8PA0_VALUE);
    14ec:	eb e3       	ldi	r30, 0x3B	; 59
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a e8       	ldi	r24, 0x8A	; 138
    14f2:	80 83       	st	Z, r24

	DDRB = CONC(DIO_u8PB7_DIR , DIO_u8PB6_DIR , DIO_u8PB5_DIR , DIO_u8PB4_DIR , DIO_u8PB3_DIR , DIO_u8PB2_DIR , DIO_u8PB1_DIR , DIO_u8PB0_DIR);
    14f4:	e7 e3       	ldi	r30, 0x37	; 55
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	84 e5       	ldi	r24, 0x54	; 84
    14fa:	80 83       	st	Z, r24
	PORTB = CONC(DIO_u8PB7_VALUE , DIO_u8PB6_VALUE , DIO_u8PB5_VALUE , DIO_u8PB4_VALUE , DIO_u8PB3_VALUE , DIO_u8PB2_VALUE , DIO_u8PB1_VALUE , DIO_u8PB0_VALUE);
    14fc:	e8 e3       	ldi	r30, 0x38	; 56
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	85 e7       	ldi	r24, 0x75	; 117
    1502:	80 83       	st	Z, r24

	DDRC = CONC(DIO_u8PC7_DIR , DIO_u8PC6_DIR , DIO_u8PC5_DIR , DIO_u8PC4_DIR , DIO_u8PC3_DIR , DIO_u8PC2_DIR , DIO_u8PC1_DIR , DIO_u8PC0_DIR);
    1504:	e4 e3       	ldi	r30, 0x34	; 52
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	85 e9       	ldi	r24, 0x95	; 149
    150a:	80 83       	st	Z, r24
	PORTC = CONC(DIO_u8PC7_VALUE , DIO_u8PC6_VALUE , DIO_u8PC5_VALUE , DIO_u8PC4_VALUE , DIO_u8PC3_VALUE , DIO_u8PC2_VALUE , DIO_u8PC1_VALUE , DIO_u8PC0_VALUE);
    150c:	e5 e3       	ldi	r30, 0x35	; 53
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	88 e6       	ldi	r24, 0x68	; 104
    1512:	80 83       	st	Z, r24

	DDRD = CONC(DIO_u8PD7_DIR , DIO_u8PD6_DIR , DIO_u8PD5_DIR , DIO_u8PD4_DIR , DIO_u8PD3_DIR , DIO_u8PD2_DIR , DIO_u8PD1_DIR , DIO_u8PD0_DIR);
    1514:	e1 e3       	ldi	r30, 0x31	; 49
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8d e6       	ldi	r24, 0x6D	; 109
    151a:	80 83       	st	Z, r24
	PORTD = CONC(DIO_u8PD7_VALUE , DIO_u8PD6_VALUE , DIO_u8PD5_VALUE , DIO_u8PD4_VALUE , DIO_u8PD3_VALUE , DIO_u8PD2_VALUE , DIO_u8PD1_VALUE , DIO_u8PD0_VALUE);
    151c:	e2 e3       	ldi	r30, 0x32	; 50
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8d e4       	ldi	r24, 0x4D	; 77
    1522:	80 83       	st	Z, r24

	return Local_enuErrorStatus;
    1524:	89 81       	ldd	r24, Y+1	; 0x01
}
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PortDirection)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <DIO_enuSetPinDirection+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <DIO_enuSetPinDirection+0x8>
    1536:	00 d0       	rcall	.+0      	; 0x1538 <DIO_enuSetPinDirection+0xa>
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	8a 83       	std	Y+2, r24	; 0x02
    153e:	6b 83       	std	Y+3, r22	; 0x03
    1540:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStatus = ES_NOK;
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	89 83       	std	Y+1, r24	; 0x01
	//if valid port AND pin AND value to be handeled...then proceed
  if(Copy_u8PortID <= DIO_u8PORTD
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	08 f0       	brcs	.+2      	; 0x154e <DIO_enuSetPinDirection+0x20>
    154c:	d2 c0       	rjmp	.+420    	; 0x16f2 <DIO_enuSetPinDirection+0x1c4>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	88 30       	cpi	r24, 0x08	; 8
    1552:	08 f0       	brcs	.+2      	; 0x1556 <DIO_enuSetPinDirection+0x28>
    1554:	ce c0       	rjmp	.+412    	; 0x16f2 <DIO_enuSetPinDirection+0x1c4>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	21 f0       	breq	.+8      	; 0x1564 <DIO_enuSetPinDirection+0x36>
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	88 23       	and	r24, r24
    1560:	09 f0       	breq	.+2      	; 0x1564 <DIO_enuSetPinDirection+0x36>
    1562:	c7 c0       	rjmp	.+398    	; 0x16f2 <DIO_enuSetPinDirection+0x1c4>
	  && Copy_u8PinID <= DIO_u8PIN7
	  && (Copy_u8PortDirection==DIO_u8OUTPUT||Copy_u8PortDirection==DIO_u8INPUT))
  {
	switch(Copy_u8PortID)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3e 83       	std	Y+6, r19	; 0x06
    156c:	2d 83       	std	Y+5, r18	; 0x05
    156e:	6d 81       	ldd	r22, Y+5	; 0x05
    1570:	7e 81       	ldd	r23, Y+6	; 0x06
    1572:	61 30       	cpi	r22, 0x01	; 1
    1574:	71 05       	cpc	r23, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <DIO_enuSetPinDirection+0x4c>
    1578:	41 c0       	rjmp	.+130    	; 0x15fc <DIO_enuSetPinDirection+0xce>
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	91 05       	cpc	r25, r1
    1582:	34 f4       	brge	.+12     	; 0x1590 <DIO_enuSetPinDirection+0x62>
    1584:	2d 81       	ldd	r18, Y+5	; 0x05
    1586:	3e 81       	ldd	r19, Y+6	; 0x06
    1588:	21 15       	cp	r18, r1
    158a:	31 05       	cpc	r19, r1
    158c:	71 f0       	breq	.+28     	; 0x15aa <DIO_enuSetPinDirection+0x7c>
    158e:	b3 c0       	rjmp	.+358    	; 0x16f6 <DIO_enuSetPinDirection+0x1c8>
    1590:	6d 81       	ldd	r22, Y+5	; 0x05
    1592:	7e 81       	ldd	r23, Y+6	; 0x06
    1594:	62 30       	cpi	r22, 0x02	; 2
    1596:	71 05       	cpc	r23, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <DIO_enuSetPinDirection+0x6e>
    159a:	59 c0       	rjmp	.+178    	; 0x164e <DIO_enuSetPinDirection+0x120>
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <DIO_enuSetPinDirection+0x7a>
    15a6:	7c c0       	rjmp	.+248    	; 0x16a0 <DIO_enuSetPinDirection+0x172>
    15a8:	a6 c0       	rjmp	.+332    	; 0x16f6 <DIO_enuSetPinDirection+0x1c8>
	{
	case DIO_u8PORTA:
		//	suppose pinId is 5, so->> DDRA &= 	~(1<<5) == ~(0001 0000) == 1110 1111
		// so exceprition be like DDRA &= 1110 1111 *********so only bit 5 is masked by AND with zero******
		DDRA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    15aa:	aa e3       	ldi	r26, 0x3A	; 58
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ea e3       	ldi	r30, 0x3A	; 58
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_enuSetPinDirection+0x98>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	2a 95       	dec	r18
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_enuSetPinDirection+0x94>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
		DDRA |=  (Copy_u8PortDirection <<Copy_u8PinID);
    15d0:	aa e3       	ldi	r26, 0x3A	; 58
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ea e3       	ldi	r30, 0x3A	; 58
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	b9 01       	movw	r22, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_enuSetPinDirection+0xc2>
    15ec:	66 0f       	add	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	8a 95       	dec	r24
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_enuSetPinDirection+0xbe>
    15f4:	cb 01       	movw	r24, r22
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	7d c0       	rjmp	.+250    	; 0x16f6 <DIO_enuSetPinDirection+0x1c8>

		break;
	case DIO_u8PORTB:
		DDRB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    15fc:	a7 e3       	ldi	r26, 0x37	; 55
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e3       	ldi	r30, 0x37	; 55
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_enuSetPinDirection+0xea>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	2a 95       	dec	r18
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_enuSetPinDirection+0xe6>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
		DDRB |=  (Copy_u8PortDirection <<Copy_u8PinID);
    1622:	a7 e3       	ldi	r26, 0x37	; 55
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e3       	ldi	r30, 0x37	; 55
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	b9 01       	movw	r22, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_enuSetPinDirection+0x114>
    163e:	66 0f       	add	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	8a 95       	dec	r24
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_enuSetPinDirection+0x110>
    1646:	cb 01       	movw	r24, r22
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	54 c0       	rjmp	.+168    	; 0x16f6 <DIO_enuSetPinDirection+0x1c8>

		break;
	case DIO_u8PORTC:
		DDRC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    164e:	a4 e3       	ldi	r26, 0x34	; 52
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e4 e3       	ldi	r30, 0x34	; 52
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_enuSetPinDirection+0x13c>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	2a 95       	dec	r18
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_enuSetPinDirection+0x138>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
		DDRC |=  (Copy_u8PortDirection <<Copy_u8PinID);
    1674:	a4 e3       	ldi	r26, 0x34	; 52
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e4 e3       	ldi	r30, 0x34	; 52
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	b9 01       	movw	r22, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_enuSetPinDirection+0x166>
    1690:	66 0f       	add	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	8a 95       	dec	r24
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_enuSetPinDirection+0x162>
    1698:	cb 01       	movw	r24, r22
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	2b c0       	rjmp	.+86     	; 0x16f6 <DIO_enuSetPinDirection+0x1c8>
		break;
	case DIO_u8PORTD:
		DDRD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    16a0:	a1 e3       	ldi	r26, 0x31	; 49
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e1 e3       	ldi	r30, 0x31	; 49
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_enuSetPinDirection+0x18e>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	2a 95       	dec	r18
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_enuSetPinDirection+0x18a>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
		DDRD |=  (Copy_u8PortDirection <<Copy_u8PinID);
    16c6:	a1 e3       	ldi	r26, 0x31	; 49
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e1 e3       	ldi	r30, 0x31	; 49
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	b9 01       	movw	r22, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_enuSetPinDirection+0x1b8>
    16e2:	66 0f       	add	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	8a 95       	dec	r24
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_enuSetPinDirection+0x1b4>
    16ea:	cb 01       	movw	r24, r22
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_enuSetPinDirection+0x1c8>
	}

  }
  else
  {
	 Local_enuErrorStatus = ES_OUT_OF_RANGE;
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	89 83       	std	Y+1, r24	; 0x01
  }

	return Local_enuErrorStatus;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f8:	26 96       	adiw	r28, 0x06	; 6
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <DIO_enuTogPinValue+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <DIO_enuTogPinValue+0x8>
    1712:	0f 92       	push	r0
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	8a 83       	std	Y+2, r24	; 0x02
    171a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK;
    171c:	82 e0       	ldi	r24, 0x02	; 2
    171e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_u8PORTD
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	84 30       	cpi	r24, 0x04	; 4
    1724:	08 f0       	brcs	.+2      	; 0x1728 <DIO_enuTogPinValue+0x1e>
    1726:	73 c0       	rjmp	.+230    	; 0x180e <DIO_enuTogPinValue+0x104>
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	08 f0       	brcs	.+2      	; 0x1730 <DIO_enuTogPinValue+0x26>
    172e:	6f c0       	rjmp	.+222    	; 0x180e <DIO_enuTogPinValue+0x104>
				&& Copy_u8PinID <= DIO_u8PIN7)
			{
			switch(Copy_u8PortID)
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3d 83       	std	Y+5, r19	; 0x05
    1738:	2c 83       	std	Y+4, r18	; 0x04
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	49 f1       	breq	.+82     	; 0x1796 <DIO_enuTogPinValue+0x8c>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <DIO_enuTogPinValue+0x4e>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 f0       	breq	.+24     	; 0x176e <DIO_enuTogPinValue+0x64>
    1756:	5d c0       	rjmp	.+186    	; 0x1812 <DIO_enuTogPinValue+0x108>
    1758:	2c 81       	ldd	r18, Y+4	; 0x04
    175a:	3d 81       	ldd	r19, Y+5	; 0x05
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	71 f1       	breq	.+92     	; 0x17be <DIO_enuTogPinValue+0xb4>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	e9 f1       	breq	.+122    	; 0x17e6 <DIO_enuTogPinValue+0xdc>
    176c:	52 c0       	rjmp	.+164    	; 0x1812 <DIO_enuTogPinValue+0x108>
			{
			case DIO_u8PORTA:
				PORTA ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
    176e:	ab e3       	ldi	r26, 0x3B	; 59
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	eb e3       	ldi	r30, 0x3B	; 59
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_enuTogPinValue+0x82>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_enuTogPinValue+0x7e>
    1790:	84 27       	eor	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	3e c0       	rjmp	.+124    	; 0x1812 <DIO_enuTogPinValue+0x108>


				break;
			case DIO_u8PORTB:
				PORTB ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
    1796:	a8 e3       	ldi	r26, 0x38	; 56
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e8 e3       	ldi	r30, 0x38	; 56
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_enuTogPinValue+0xaa>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_enuTogPinValue+0xa6>
    17b8:	84 27       	eor	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	2a c0       	rjmp	.+84     	; 0x1812 <DIO_enuTogPinValue+0x108>


				break;
			case DIO_u8PORTC:
				PORTC ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
    17be:	a5 e3       	ldi	r26, 0x35	; 53
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 e3       	ldi	r30, 0x35	; 53
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_enuTogPinValue+0xd2>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_enuTogPinValue+0xce>
    17e0:	84 27       	eor	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	16 c0       	rjmp	.+44     	; 0x1812 <DIO_enuTogPinValue+0x108>

				break;
			case DIO_u8PORTD:
				PORTD ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
    17e6:	a2 e3       	ldi	r26, 0x32	; 50
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e2 e3       	ldi	r30, 0x32	; 50
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_enuTogPinValue+0xfa>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_enuTogPinValue+0xf6>
    1808:	84 27       	eor	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_enuTogPinValue+0x108>
				break;
			}
		}
			else
			{
				 Local_enuErrorStatus = ES_OUT_OF_RANGE;
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	89 83       	std	Y+1, r24	; 0x01

			}

	return Local_enuErrorStatus;
    1812:	89 81       	ldd	r24, Y+1	; 0x01

}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_enuSetPinValue+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <DIO_enuSetPinValue+0x8>
    182c:	00 d0       	rcall	.+0      	; 0x182e <DIO_enuSetPinValue+0xa>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	6b 83       	std	Y+3, r22	; 0x03
    1836:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStatus = ES_NOK;
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_u8PORTD
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	08 f0       	brcs	.+2      	; 0x1844 <DIO_enuSetPinValue+0x20>
    1842:	d2 c0       	rjmp	.+420    	; 0x19e8 <DIO_enuSetPinValue+0x1c4>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	88 30       	cpi	r24, 0x08	; 8
    1848:	08 f0       	brcs	.+2      	; 0x184c <DIO_enuSetPinValue+0x28>
    184a:	ce c0       	rjmp	.+412    	; 0x19e8 <DIO_enuSetPinValue+0x1c4>
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	20 f0       	brcs	.+8      	; 0x185a <DIO_enuSetPinValue+0x36>
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	88 23       	and	r24, r24
    1856:	09 f0       	breq	.+2      	; 0x185a <DIO_enuSetPinValue+0x36>
    1858:	c7 c0       	rjmp	.+398    	; 0x19e8 <DIO_enuSetPinValue+0x1c4>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8PinValue <= DIO_u8HIGH ||Copy_u8PinValue <= DIO_u8PULL_UP ))
		{
		switch(Copy_u8PortID)
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	3e 83       	std	Y+6, r19	; 0x06
    1862:	2d 83       	std	Y+5, r18	; 0x05
    1864:	6d 81       	ldd	r22, Y+5	; 0x05
    1866:	7e 81       	ldd	r23, Y+6	; 0x06
    1868:	61 30       	cpi	r22, 0x01	; 1
    186a:	71 05       	cpc	r23, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <DIO_enuSetPinValue+0x4c>
    186e:	41 c0       	rjmp	.+130    	; 0x18f2 <DIO_enuSetPinValue+0xce>
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	91 05       	cpc	r25, r1
    1878:	34 f4       	brge	.+12     	; 0x1886 <DIO_enuSetPinValue+0x62>
    187a:	2d 81       	ldd	r18, Y+5	; 0x05
    187c:	3e 81       	ldd	r19, Y+6	; 0x06
    187e:	21 15       	cp	r18, r1
    1880:	31 05       	cpc	r19, r1
    1882:	71 f0       	breq	.+28     	; 0x18a0 <DIO_enuSetPinValue+0x7c>
    1884:	b3 c0       	rjmp	.+358    	; 0x19ec <DIO_enuSetPinValue+0x1c8>
    1886:	6d 81       	ldd	r22, Y+5	; 0x05
    1888:	7e 81       	ldd	r23, Y+6	; 0x06
    188a:	62 30       	cpi	r22, 0x02	; 2
    188c:	71 05       	cpc	r23, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <DIO_enuSetPinValue+0x6e>
    1890:	59 c0       	rjmp	.+178    	; 0x1944 <DIO_enuSetPinValue+0x120>
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	91 05       	cpc	r25, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <DIO_enuSetPinValue+0x7a>
    189c:	7c c0       	rjmp	.+248    	; 0x1996 <DIO_enuSetPinValue+0x172>
    189e:	a6 c0       	rjmp	.+332    	; 0x19ec <DIO_enuSetPinValue+0x1c8>
		{
		case DIO_u8PORTA:

			PORTA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    18a0:	ab e3       	ldi	r26, 0x3B	; 59
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	eb e3       	ldi	r30, 0x3B	; 59
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_enuSetPinValue+0x98>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	2a 95       	dec	r18
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_enuSetPinValue+0x94>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24

			PORTA |=  (Copy_u8PinValue <<Copy_u8PinID);
    18c6:	ab e3       	ldi	r26, 0x3B	; 59
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	b9 01       	movw	r22, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_enuSetPinValue+0xc2>
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	8a 95       	dec	r24
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_enuSetPinValue+0xbe>
    18ea:	cb 01       	movw	r24, r22
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	7d c0       	rjmp	.+250    	; 0x19ec <DIO_enuSetPinValue+0x1c8>

			break;
		case DIO_u8PORTB:
			PORTB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    18f2:	a8 e3       	ldi	r26, 0x38	; 56
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e8 e3       	ldi	r30, 0x38	; 56
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_enuSetPinValue+0xea>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_enuSetPinValue+0xe6>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24

			PORTB |=  (Copy_u8PinValue <<Copy_u8PinID);
    1918:	a8 e3       	ldi	r26, 0x38	; 56
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e8 e3       	ldi	r30, 0x38	; 56
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	b9 01       	movw	r22, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_enuSetPinValue+0x114>
    1934:	66 0f       	add	r22, r22
    1936:	77 1f       	adc	r23, r23
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_enuSetPinValue+0x110>
    193c:	cb 01       	movw	r24, r22
    193e:	84 2b       	or	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	54 c0       	rjmp	.+168    	; 0x19ec <DIO_enuSetPinValue+0x1c8>

			break;
		case DIO_u8PORTC:
			PORTC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    1944:	a5 e3       	ldi	r26, 0x35	; 53
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_enuSetPinValue+0x13c>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	2a 95       	dec	r18
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_enuSetPinValue+0x138>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24

			PORTC |=  (Copy_u8PinValue <<Copy_u8PinID);
    196a:	a5 e3       	ldi	r26, 0x35	; 53
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e3       	ldi	r30, 0x35	; 53
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	b9 01       	movw	r22, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_enuSetPinValue+0x166>
    1986:	66 0f       	add	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_enuSetPinValue+0x162>
    198e:	cb 01       	movw	r24, r22
    1990:	84 2b       	or	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	2b c0       	rjmp	.+86     	; 0x19ec <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_u8PORTD:
			PORTD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
    1996:	a2 e3       	ldi	r26, 0x32	; 50
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_enuSetPinValue+0x18e>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	2a 95       	dec	r18
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_enuSetPinValue+0x18a>
    19b6:	80 95       	com	r24
    19b8:	84 23       	and	r24, r20
    19ba:	8c 93       	st	X, r24

			PORTD |=  (Copy_u8PinValue <<Copy_u8PinID);
    19bc:	a2 e3       	ldi	r26, 0x32	; 50
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e2 e3       	ldi	r30, 0x32	; 50
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	b9 01       	movw	r22, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_enuSetPinValue+0x1b8>
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_enuSetPinValue+0x1b4>
    19e0:	cb 01       	movw	r24, r22
    19e2:	84 2b       	or	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <DIO_enuSetPinValue+0x1c8>
			break;
		}
		}
		else
		{
			 Local_enuErrorStatus = ES_OUT_OF_RANGE;
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	89 83       	std	Y+1, r24	; 0x01

		}

	return Local_enuErrorStatus;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    19ee:	26 96       	adiw	r28, 0x06	; 6
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue (u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8PinValue)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	27 97       	sbiw	r28, 0x07	; 7
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	8a 83       	std	Y+2, r24	; 0x02
    1a16:	6b 83       	std	Y+3, r22	; 0x03
    1a18:	5d 83       	std	Y+5, r21	; 0x05
    1a1a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorStatus = ES_NOK;
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8PinValue != NULL)
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	9d 81       	ldd	r25, Y+5	; 0x05
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <DIO_enuGetPinValue+0x2a>
    1a28:	7b c0       	rjmp	.+246    	; 0x1b20 <DIO_enuGetPinValue+0x120>
	{
		 if (Copy_u8PortID <= DIO_u8PORTD
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <DIO_enuGetPinValue+0x32>
    1a30:	79 c0       	rjmp	.+242    	; 0x1b24 <DIO_enuGetPinValue+0x124>
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 30       	cpi	r24, 0x08	; 8
    1a36:	08 f0       	brcs	.+2      	; 0x1a3a <DIO_enuGetPinValue+0x3a>
    1a38:	75 c0       	rjmp	.+234    	; 0x1b24 <DIO_enuGetPinValue+0x124>
				&& Copy_u8PinID <= DIO_u8PIN7)
		 {
				switch(Copy_u8PortID)
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3f 83       	std	Y+7, r19	; 0x07
    1a42:	2e 83       	std	Y+6, r18	; 0x06
    1a44:	4e 81       	ldd	r20, Y+6	; 0x06
    1a46:	5f 81       	ldd	r21, Y+7	; 0x07
    1a48:	41 30       	cpi	r20, 0x01	; 1
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	59 f1       	breq	.+86     	; 0x1aa4 <DIO_enuGetPinValue+0xa4>
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	91 05       	cpc	r25, r1
    1a56:	34 f4       	brge	.+12     	; 0x1a64 <DIO_enuGetPinValue+0x64>
    1a58:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5c:	21 15       	cp	r18, r1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	69 f0       	breq	.+26     	; 0x1a7c <DIO_enuGetPinValue+0x7c>
    1a62:	5b c0       	rjmp	.+182    	; 0x1b1a <DIO_enuGetPinValue+0x11a>
    1a64:	4e 81       	ldd	r20, Y+6	; 0x06
    1a66:	5f 81       	ldd	r21, Y+7	; 0x07
    1a68:	42 30       	cpi	r20, 0x02	; 2
    1a6a:	51 05       	cpc	r21, r1
    1a6c:	79 f1       	breq	.+94     	; 0x1acc <DIO_enuGetPinValue+0xcc>
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	83 30       	cpi	r24, 0x03	; 3
    1a74:	91 05       	cpc	r25, r1
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <DIO_enuGetPinValue+0x7a>
    1a78:	3d c0       	rjmp	.+122    	; 0x1af4 <DIO_enuGetPinValue+0xf4>
    1a7a:	4f c0       	rjmp	.+158    	; 0x1b1a <DIO_enuGetPinValue+0x11a>
				{
				case DIO_u8PORTA:
					*Copy_pu8PinValue = ( (PINA >>Copy_u8PinID) & DIO_u8MASK_BIT);
    1a7c:	e9 e3       	ldi	r30, 0x39	; 57
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_enuGetPinValue+0x94>
    1a90:	55 95       	asr	r21
    1a92:	47 95       	ror	r20
    1a94:	8a 95       	dec	r24
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_enuGetPinValue+0x90>
    1a98:	ca 01       	movw	r24, r20
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa0:	80 83       	st	Z, r24
    1aa2:	3b c0       	rjmp	.+118    	; 0x1b1a <DIO_enuGetPinValue+0x11a>

					break;
				case DIO_u8PORTB:
					*Copy_pu8PinValue = ( (PINB >>Copy_u8PinID)&DIO_u8MASK_BIT);
    1aa4:	e6 e3       	ldi	r30, 0x36	; 54
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_enuGetPinValue+0xbc>
    1ab8:	55 95       	asr	r21
    1aba:	47 95       	ror	r20
    1abc:	8a 95       	dec	r24
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_enuGetPinValue+0xb8>
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	81 70       	andi	r24, 0x01	; 1
    1ac4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac8:	80 83       	st	Z, r24
    1aca:	27 c0       	rjmp	.+78     	; 0x1b1a <DIO_enuGetPinValue+0x11a>

					break;
				case DIO_u8PORTC:
					*Copy_pu8PinValue = ( (PINC >>Copy_u8PinID)&DIO_u8MASK_BIT);
    1acc:	e3 e3       	ldi	r30, 0x33	; 51
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a9 01       	movw	r20, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_enuGetPinValue+0xe4>
    1ae0:	55 95       	asr	r21
    1ae2:	47 95       	ror	r20
    1ae4:	8a 95       	dec	r24
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_enuGetPinValue+0xe0>
    1ae8:	ca 01       	movw	r24, r20
    1aea:	81 70       	andi	r24, 0x01	; 1
    1aec:	ec 81       	ldd	r30, Y+4	; 0x04
    1aee:	fd 81       	ldd	r31, Y+5	; 0x05
    1af0:	80 83       	st	Z, r24
    1af2:	13 c0       	rjmp	.+38     	; 0x1b1a <DIO_enuGetPinValue+0x11a>
					break;
				case DIO_u8PORTD:
					*Copy_pu8PinValue = ( (PIND >>Copy_u8PinID)&DIO_u8MASK_BIT);
    1af4:	e0 e3       	ldi	r30, 0x30	; 48
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_enuGetPinValue+0x10c>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_enuGetPinValue+0x108>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	ec 81       	ldd	r30, Y+4	; 0x04
    1b16:	fd 81       	ldd	r31, Y+5	; 0x05
    1b18:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorStatus = ES_OUT_OF_RANGE;
    1b1a:	83 e0       	ldi	r24, 0x03	; 3
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_enuGetPinValue+0x124>
		}
	}

		else
		{
	    	 Local_enuErrorStatus = ES_POINTER_TO_VOID;
    1b20:	84 e0       	ldi	r24, 0x04	; 4
    1b22:	89 83       	std	Y+1, r24	; 0x01

		}


	return Local_enuErrorStatus;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b26:	27 96       	adiw	r28, 0x07	; 7
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8PortDirection)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <DIO_enuSetPortDirection+0x6>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <DIO_enuSetPortDirection+0x8>
    1b40:	0f 92       	push	r0
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8a 83       	std	Y+2, r24	; 0x02
    1b48:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_u8PORTD
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <DIO_enuSetPortDirection+0x1e>
    1b54:	56 c0       	rjmp	.+172    	; 0x1c02 <DIO_enuSetPortDirection+0xca>
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	21 f0       	breq	.+8      	; 0x1b64 <DIO_enuSetPortDirection+0x2c>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	88 23       	and	r24, r24
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <DIO_enuSetPortDirection+0x2c>
    1b62:	4f c0       	rjmp	.+158    	; 0x1c02 <DIO_enuSetPortDirection+0xca>
		&& (Copy_u8PortDirection==DIO_u8OUTPUT||Copy_u8PortDirection==DIO_u8INPUT)){
		switch(Copy_u8PortID)
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3d 83       	std	Y+5, r19	; 0x05
    1b6c:	2c 83       	std	Y+4, r18	; 0x04
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	09 f1       	breq	.+66     	; 0x1bba <DIO_enuSetPortDirection+0x82>
    1b78:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <DIO_enuSetPortDirection+0x54>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	61 f0       	breq	.+24     	; 0x1ba2 <DIO_enuSetPortDirection+0x6a>
    1b8a:	3d c0       	rjmp	.+122    	; 0x1c06 <DIO_enuSetPortDirection+0xce>
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	f1 f0       	breq	.+60     	; 0x1bd2 <DIO_enuSetPortDirection+0x9a>
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	29 f1       	breq	.+74     	; 0x1bea <DIO_enuSetPortDirection+0xb2>
    1ba0:	32 c0       	rjmp	.+100    	; 0x1c06 <DIO_enuSetPortDirection+0xce>
		{
		case DIO_u8PORTA :
			if(Copy_u8PortDirection==DIO_u8OUTPUT){
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <DIO_enuSetPortDirection+0x7a>
				DDRA = DIO_u8PORT_OUTPUT;
    1ba8:	ea e3       	ldi	r30, 0x3A	; 58
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	80 83       	st	Z, r24
    1bb0:	2a c0       	rjmp	.+84     	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			else{
				DDRA = DIO_u8PORT_INPUT;
    1bb2:	ea e3       	ldi	r30, 0x3A	; 58
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	10 82       	st	Z, r1
    1bb8:	26 c0       	rjmp	.+76     	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			break;
		case DIO_u8PORTB :
			if(Copy_u8PortDirection==DIO_u8OUTPUT){
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <DIO_enuSetPortDirection+0x92>
				DDRB = DIO_u8PORT_OUTPUT;
    1bc0:	e7 e3       	ldi	r30, 0x37	; 55
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	80 83       	st	Z, r24
    1bc8:	1e c0       	rjmp	.+60     	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			else{
				DDRB = DIO_u8PORT_INPUT;
    1bca:	e7 e3       	ldi	r30, 0x37	; 55
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	10 82       	st	Z, r1
    1bd0:	1a c0       	rjmp	.+52     	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			break;
		case DIO_u8PORTC :
			if(Copy_u8PortDirection==DIO_u8OUTPUT){
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <DIO_enuSetPortDirection+0xaa>
				DDRC = DIO_u8PORT_OUTPUT;
    1bd8:	e4 e3       	ldi	r30, 0x34	; 52
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	80 83       	st	Z, r24
    1be0:	12 c0       	rjmp	.+36     	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			else{
				DDRC = DIO_u8PORT_INPUT;
    1be2:	e4 e3       	ldi	r30, 0x34	; 52
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	10 82       	st	Z, r1
    1be8:	0e c0       	rjmp	.+28     	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			break;
		case DIO_u8PORTD :
			if(Copy_u8PortDirection==DIO_u8OUTPUT){
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	29 f4       	brne	.+10     	; 0x1bfa <DIO_enuSetPortDirection+0xc2>
				DDRD = DIO_u8PORT_OUTPUT;
    1bf0:	e1 e3       	ldi	r30, 0x31	; 49
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	80 83       	st	Z, r24
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			else{
				DDRD = DIO_u8PORT_INPUT;
    1bfa:	e1 e3       	ldi	r30, 0x31	; 49
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	10 82       	st	Z, r1
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_enuSetPortDirection+0xce>
			}
			break;
		}
	}
	else{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue    (u8 Copy_u8PortID , u8 Copy_u8PortValue)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <DIO_enuSetPortValue+0x6>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <DIO_enuSetPortValue+0x8>
    1c20:	0f 92       	push	r0
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	8a 83       	std	Y+2, r24	; 0x02
    1c28:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_u8PORTD
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	84 30       	cpi	r24, 0x04	; 4
    1c32:	98 f5       	brcc	.+102    	; 0x1c9a <DIO_enuSetPortValue+0x82>
		&& (Copy_u8PortValue <= DIO_u8PORT_HIGH && Copy_u8PortValue >= DIO_u8PORT_LOW)){
		switch(Copy_u8PortID)
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3d 83       	std	Y+5, r19	; 0x05
    1c3c:	2c 83       	std	Y+4, r18	; 0x04
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	9d 81       	ldd	r25, Y+5	; 0x05
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	91 05       	cpc	r25, r1
    1c46:	d1 f0       	breq	.+52     	; 0x1c7c <DIO_enuSetPortValue+0x64>
    1c48:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4c:	22 30       	cpi	r18, 0x02	; 2
    1c4e:	31 05       	cpc	r19, r1
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <DIO_enuSetPortValue+0x44>
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <DIO_enuSetPortValue+0x5a>
    1c5a:	21 c0       	rjmp	.+66     	; 0x1c9e <DIO_enuSetPortValue+0x86>
    1c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	81 f0       	breq	.+32     	; 0x1c86 <DIO_enuSetPortValue+0x6e>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	81 f0       	breq	.+32     	; 0x1c90 <DIO_enuSetPortValue+0x78>
    1c70:	16 c0       	rjmp	.+44     	; 0x1c9e <DIO_enuSetPortValue+0x86>
				{
				case DIO_u8PORTA :
					PORTA = Copy_u8PortValue;
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	80 83       	st	Z, r24
    1c7a:	11 c0       	rjmp	.+34     	; 0x1c9e <DIO_enuSetPortValue+0x86>
					break;
				case DIO_u8PORTB :
					PORTB = Copy_u8PortValue;
    1c7c:	e8 e3       	ldi	r30, 0x38	; 56
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	80 83       	st	Z, r24
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <DIO_enuSetPortValue+0x86>
					break;
				case DIO_u8PORTC :
					PORTC = Copy_u8PortValue;
    1c86:	e5 e3       	ldi	r30, 0x35	; 53
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	80 83       	st	Z, r24
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <DIO_enuSetPortValue+0x86>
					break;
				case DIO_u8PORTD :
					PORTD = Copy_u8PortValue;
    1c90:	e2 e3       	ldi	r30, 0x32	; 50
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	80 83       	st	Z, r24
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_enuSetPortValue+0x86>
					break;
				}
	}
	else{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_u8PortValue)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <DIO_enuGetPortValue+0x6>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <DIO_enuGetPortValue+0x8>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <DIO_enuGetPortValue+0xa>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	7c 83       	std	Y+4, r23	; 0x04
    1cc2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = ES_NOK;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortValue != NULL){
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <DIO_enuGetPortValue+0x22>
    1cd0:	41 c0       	rjmp	.+130    	; 0x1d54 <DIO_enuGetPortValue+0xa4>
		if(Copy_u8PortID <= DIO_u8PORTD){
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	d8 f5       	brcc	.+118    	; 0x1d4e <DIO_enuGetPortValue+0x9e>
			switch(Copy_u8PortID)
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3e 83       	std	Y+6, r19	; 0x06
    1ce0:	2d 83       	std	Y+5, r18	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	e1 f0       	breq	.+56     	; 0x1d24 <DIO_enuGetPortValue+0x74>
    1cec:	2d 81       	ldd	r18, Y+5	; 0x05
    1cee:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <DIO_enuGetPortValue+0x50>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	61 f0       	breq	.+24     	; 0x1d16 <DIO_enuGetPortValue+0x66>
    1cfe:	2c c0       	rjmp	.+88     	; 0x1d58 <DIO_enuGetPortValue+0xa8>
    1d00:	2d 81       	ldd	r18, Y+5	; 0x05
    1d02:	3e 81       	ldd	r19, Y+6	; 0x06
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	a1 f0       	breq	.+40     	; 0x1d32 <DIO_enuGetPortValue+0x82>
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	b1 f0       	breq	.+44     	; 0x1d40 <DIO_enuGetPortValue+0x90>
    1d14:	21 c0       	rjmp	.+66     	; 0x1d58 <DIO_enuGetPortValue+0xa8>
			{
			case DIO_u8PORTA :
				*Copy_u8PortValue = PORTA;
    1d16:	eb e3       	ldi	r30, 0x3B	; 59
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d20:	80 83       	st	Z, r24
    1d22:	1a c0       	rjmp	.+52     	; 0x1d58 <DIO_enuGetPortValue+0xa8>
				break;
			case DIO_u8PORTB :
				*Copy_u8PortValue = PORTB;
    1d24:	e8 e3       	ldi	r30, 0x38	; 56
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2e:	80 83       	st	Z, r24
    1d30:	13 c0       	rjmp	.+38     	; 0x1d58 <DIO_enuGetPortValue+0xa8>
				break;
			case DIO_u8PORTC :
				*Copy_u8PortValue = PORTC;
    1d32:	e5 e3       	ldi	r30, 0x35	; 53
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3c:	80 83       	st	Z, r24
    1d3e:	0c c0       	rjmp	.+24     	; 0x1d58 <DIO_enuGetPortValue+0xa8>
				break;
			case DIO_u8PORTD :
				*Copy_u8PortValue = PORTD;
    1d40:	e2 e3       	ldi	r30, 0x32	; 50
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	eb 81       	ldd	r30, Y+3	; 0x03
    1d48:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4a:	80 83       	st	Z, r24
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <DIO_enuGetPortValue+0xa8>
				break;
			}
		}
		else{
			Local_u8ErrorState = ES_OUT_OF_RANGE;
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_enuGetPortValue+0xa8>
		  }
	}
	else{
		Local_u8ErrorState = ES_POINTER_TO_VOID;
    1d54:	84 e0       	ldi	r24, 0x04	; 4
    1d56:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5a:	26 96       	adiw	r28, 0x06	; 6
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <LCD_enuInit>:
#include "LCD_priv.h"


#include <util/delay.h>

ES_t LCD_enuInit(void) {
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	e9 97       	sbiw	r28, 0x39	; 57
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_ErrorState = ES_NOK;
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	89 af       	std	Y+57, r24	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	63 e0       	ldi	r22, 0x03	; 3
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	67 e0       	ldi	r22, 0x07	; 7
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	66 e0       	ldi	r22, 0x06	; 6
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	65 e0       	ldi	r22, 0x05	; 5
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	64 e0       	ldi	r22, 0x04	; 4
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	ac e0       	ldi	r26, 0x0C	; 12
    1dd0:	b2 e4       	ldi	r27, 0x42	; 66
    1dd2:	8d ab       	std	Y+53, r24	; 0x35
    1dd4:	9e ab       	std	Y+54, r25	; 0x36
    1dd6:	af ab       	std	Y+55, r26	; 0x37
    1dd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dda:	6d a9       	ldd	r22, Y+53	; 0x35
    1ddc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dde:	8f a9       	ldd	r24, Y+55	; 0x37
    1de0:	98 ad       	ldd	r25, Y+56	; 0x38
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4a e7       	ldi	r20, 0x7A	; 122
    1de8:	55 e4       	ldi	r21, 0x45	; 69
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	89 ab       	std	Y+49, r24	; 0x31
    1df4:	9a ab       	std	Y+50, r25	; 0x32
    1df6:	ab ab       	std	Y+51, r26	; 0x33
    1df8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1e00:	9c a9       	ldd	r25, Y+52	; 0x34
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e8       	ldi	r20, 0x80	; 128
    1e08:	5f e3       	ldi	r21, 0x3F	; 63
    1e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0e:	88 23       	and	r24, r24
    1e10:	2c f4       	brge	.+10     	; 0x1e1c <LCD_enuInit+0xb0>
		__ticks = 1;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	98 ab       	std	Y+48, r25	; 0x30
    1e18:	8f a7       	std	Y+47, r24	; 0x2f
    1e1a:	3f c0       	rjmp	.+126    	; 0x1e9a <LCD_enuInit+0x12e>
	else if (__tmp > 65535)
    1e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e20:	8b a9       	ldd	r24, Y+51	; 0x33
    1e22:	9c a9       	ldd	r25, Y+52	; 0x34
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	4f e7       	ldi	r20, 0x7F	; 127
    1e2a:	57 e4       	ldi	r21, 0x47	; 71
    1e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e30:	18 16       	cp	r1, r24
    1e32:	4c f5       	brge	.+82     	; 0x1e86 <LCD_enuInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e34:	6d a9       	ldd	r22, Y+53	; 0x35
    1e36:	7e a9       	ldd	r23, Y+54	; 0x36
    1e38:	8f a9       	ldd	r24, Y+55	; 0x37
    1e3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e2       	ldi	r20, 0x20	; 32
    1e42:	51 e4       	ldi	r21, 0x41	; 65
    1e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	98 ab       	std	Y+48, r25	; 0x30
    1e5a:	8f a7       	std	Y+47, r24	; 0x2f
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <LCD_enuInit+0x110>
    1e5e:	80 e9       	ldi	r24, 0x90	; 144
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	9e a7       	std	Y+46, r25	; 0x2e
    1e64:	8d a7       	std	Y+45, r24	; 0x2d
    1e66:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e68:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_enuInit+0xfe>
    1e6e:	9e a7       	std	Y+46, r25	; 0x2e
    1e70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e74:	98 a9       	ldd	r25, Y+48	; 0x30
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	98 ab       	std	Y+48, r25	; 0x30
    1e7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	69 f7       	brne	.-38     	; 0x1e5e <LCD_enuInit+0xf2>
    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <LCD_enuInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e86:	69 a9       	ldd	r22, Y+49	; 0x31
    1e88:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	98 ab       	std	Y+48, r25	; 0x30
    1e98:	8f a7       	std	Y+47, r24	; 0x2f
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	9c a7       	std	Y+44, r25	; 0x2c
    1ea0:	8b a7       	std	Y+43, r24	; 0x2b
    1ea2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_enuInit+0x13a>
    1eaa:	9c a7       	std	Y+44, r25	; 0x2c
    1eac:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35); //power on
#if LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //LOW in instruction mode
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	61 e0       	ldi	r22, 0x01	; 1
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(FUNC_SET_FOUR_BIT);
    1eb8:	88 e2       	ldi	r24, 0x28	; 40
    1eba:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 e8       	ldi	r26, 0x80	; 128
    1ec4:	bf e3       	ldi	r27, 0x3F	; 63
    1ec6:	8f a3       	std	Y+39, r24	; 0x27
    1ec8:	98 a7       	std	Y+40, r25	; 0x28
    1eca:	a9 a7       	std	Y+41, r26	; 0x29
    1ecc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a e7       	ldi	r20, 0x7A	; 122
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b a3       	std	Y+35, r24	; 0x23
    1ee8:	9c a3       	std	Y+36, r25	; 0x24
    1eea:	ad a3       	std	Y+37, r26	; 0x25
    1eec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <LCD_enuInit+0x1a4>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9a a3       	std	Y+34, r25	; 0x22
    1f0c:	89 a3       	std	Y+33, r24	; 0x21
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    1f10:	6b a1       	ldd	r22, Y+35	; 0x23
    1f12:	7c a1       	ldd	r23, Y+36	; 0x24
    1f14:	8d a1       	ldd	r24, Y+37	; 0x25
    1f16:	9e a1       	ldd	r25, Y+38	; 0x26
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_enuInit+0x204>
    1f52:	80 e9       	ldi	r24, 0x90	; 144
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	98 a3       	std	Y+32, r25	; 0x20
    1f58:	8f 8f       	std	Y+31, r24	; 0x1f
    1f5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f5c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_enuInit+0x1f2>
    1f62:	98 a3       	std	Y+32, r25	; 0x20
    1f64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	89 a1       	ldd	r24, Y+33	; 0x21
    1f68:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9a a3       	std	Y+34, r25	; 0x22
    1f6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	89 a1       	ldd	r24, Y+33	; 0x21
    1f72:	9a a1       	ldd	r25, Y+34	; 0x22
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <LCD_enuInit+0x1e6>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9a a3       	std	Y+34, r25	; 0x22
    1f8c:	89 a3       	std	Y+33, r24	; 0x21
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	9e 8f       	std	Y+30, r25	; 0x1e
    1f94:	8d 8f       	std	Y+29, r24	; 0x1d
    1f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_enuInit+0x22e>
    1f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enuSetPinDirection(D0_PORT , D0_PIN , DIO_u8OUTPUT);

#endif

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(DISPLAY_ON_CURSOR_OFF);
    1fac:	8c e0       	ldi	r24, 0x0C	; 12
    1fae:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	89 8f       	std	Y+25, r24	; 0x19
    1fbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	55 e4       	ldi	r21, 0x45	; 69
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8d 8b       	std	Y+21, r24	; 0x15
    1fdc:	9e 8b       	std	Y+22, r25	; 0x16
    1fde:	af 8b       	std	Y+23, r26	; 0x17
    1fe0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_enuInit+0x298>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_enuInit+0x316>
	else if (__tmp > 65535)
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_enuInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	69 8d       	ldd	r22, Y+25	; 0x19
    201e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_enuInit+0x2f8>
    2046:	80 e9       	ldi	r24, 0x90	; 144
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	9a 8b       	std	Y+18, r25	; 0x12
    204c:	89 8b       	std	Y+17, r24	; 0x11
    204e:	89 89       	ldd	r24, Y+17	; 0x11
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_enuInit+0x2e6>
    2056:	9a 8b       	std	Y+18, r25	; 0x12
    2058:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_enuInit+0x2da>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_enuInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6d 89       	ldd	r22, Y+21	; 0x15
    2070:	7e 89       	ldd	r23, Y+22	; 0x16
    2072:	8f 89       	ldd	r24, Y+23	; 0x17
    2074:	98 8d       	ldd	r25, Y+24	; 0x18
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	98 8b       	std	Y+16, r25	; 0x10
    2088:	8f 87       	std	Y+15, r24	; 0x0f
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 89       	ldd	r25, Y+16	; 0x10
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_enuInit+0x322>
    2092:	98 8b       	std	Y+16, r25	; 0x10
    2094:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 e0       	ldi	r26, 0x00	; 0
    20ac:	b0 e4       	ldi	r27, 0x40	; 64
    20ae:	8b 87       	std	Y+11, r24	; 0x0b
    20b0:	9c 87       	std	Y+12, r25	; 0x0c
    20b2:	ad 87       	std	Y+13, r26	; 0x0d
    20b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    20bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a e7       	ldi	r20, 0x7A	; 122
    20c4:	55 e4       	ldi	r21, 0x45	; 69
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	8f 83       	std	Y+7, r24	; 0x07
    20d0:	98 87       	std	Y+8, r25	; 0x08
    20d2:	a9 87       	std	Y+9, r26	; 0x09
    20d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	5f e3       	ldi	r21, 0x3F	; 63
    20e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <LCD_enuInit+0x38c>
		__ticks = 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	3f c0       	rjmp	.+126    	; 0x2176 <LCD_enuInit+0x40a>
	else if (__tmp > 65535)
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	57 e4       	ldi	r21, 0x47	; 71
    2108:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	4c f5       	brge	.+82     	; 0x2162 <LCD_enuInit+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2110:	6b 85       	ldd	r22, Y+11	; 0x0b
    2112:	7c 85       	ldd	r23, Y+12	; 0x0c
    2114:	8d 85       	ldd	r24, Y+13	; 0x0d
    2116:	9e 85       	ldd	r25, Y+14	; 0x0e
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <LCD_enuInit+0x3ec>
    213a:	80 e9       	ldi	r24, 0x90	; 144
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_enuInit+0x3da>
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f7       	brne	.-38     	; 0x213a <LCD_enuInit+0x3ce>
    2160:	14 c0       	rjmp	.+40     	; 0x218a <LCD_enuInit+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_enuInit+0x416>
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(ENTRY_MOOD);
    2194:	86 e0       	ldi	r24, 0x06	; 6
    2196:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

	return Local_ErrorState;
    219a:	89 ad       	ldd	r24, Y+57	; 0x39
}
    219c:	e9 96       	adiw	r28, 0x39	; 57
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <LCD_enuWriteAndLatch>:

static ES_t LCD_enuWriteAndLatch(u8 Copy_u8Data) {/************ static makes sure the function is local and can not be externed*****************/
    21ae:	0f 93       	push	r16
    21b0:	1f 93       	push	r17
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	c7 55       	subi	r28, 0x57	; 87
    21bc:	d0 40       	sbci	r29, 0x00	; 0
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	fe 01       	movw	r30, r28
    21ca:	e9 5a       	subi	r30, 0xA9	; 169
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 83       	st	Z, r24

	u8 Local_ErrorState = ES_NOK;
    21d0:	fe 01       	movw	r30, r28
    21d2:	eb 5a       	subi	r30, 0xAB	; 171
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	80 83       	st	Z, r24

	/******* make sure RW_PORT low to be in write mode *****/
	/******* make sure EN_PORT low to be ready for the latch	*****/

	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW); // low as we write data or instruction
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	62 e0       	ldi	r22, 0x02	; 2
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW); // low to be ready for the latch -> H-L
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	63 e0       	ldi	r22, 0x03	; 3
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>

	/********** Data Writing ************/

	if (Copy_u8Data == FUNC_SET_FOUR_BIT) // function set for four bit mode needs extra send operation
    21ee:	fe 01       	movw	r30, r28
    21f0:	e9 5a       	subi	r30, 0xA9	; 169
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	88 32       	cpi	r24, 0x28	; 40
    21f8:	09 f0       	breq	.+2      	; 0x21fc <LCD_enuWriteAndLatch+0x4e>
    21fa:	88 c1       	rjmp	.+784    	; 0x250c <LCD_enuWriteAndLatch+0x35e>
	{
		u8 Local_u8RS_Value;
		DIO_enuGetPinValue(RS_PORT, RS_PIN, &Local_u8RS_Value);
    21fc:	9e 01       	movw	r18, r28
    21fe:	2a 5a       	subi	r18, 0xAA	; 170
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	a9 01       	movw	r20, r18
    2208:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_enuGetPinValue>

		if (Local_u8RS_Value == DIO_u8LOW) //CHECK if RS is set in instructions mode else it is to display ')' 0x28
    220c:	fe 01       	movw	r30, r28
    220e:	ea 5a       	subi	r30, 0xAA	; 170
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	88 23       	and	r24, r24
    2216:	09 f0       	breq	.+2      	; 0x221a <LCD_enuWriteAndLatch+0x6c>
    2218:	79 c1       	rjmp	.+754    	; 0x250c <LCD_enuWriteAndLatch+0x35e>
				{
			//if true we need to write upper four bits twice.. once here in the if condition the other in the ordinary #if four bit mode
			DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
    221a:	fe 01       	movw	r30, r28
    221c:	e9 5a       	subi	r30, 0xA9	; 169
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	98 2f       	mov	r25, r24
    2224:	99 1f       	adc	r25, r25
    2226:	99 27       	eor	r25, r25
    2228:	99 1f       	adc	r25, r25
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	67 e0       	ldi	r22, 0x07	; 7
    222e:	49 2f       	mov	r20, r25
    2230:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
    2234:	fe 01       	movw	r30, r28
    2236:	e9 5a       	subi	r30, 0xA9	; 169
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	82 95       	swap	r24
    223e:	86 95       	lsr	r24
    2240:	86 95       	lsr	r24
    2242:	83 70       	andi	r24, 0x03	; 3
    2244:	98 2f       	mov	r25, r24
    2246:	91 70       	andi	r25, 0x01	; 1
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	66 e0       	ldi	r22, 0x06	; 6
    224c:	49 2f       	mov	r20, r25
    224e:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
    2252:	fe 01       	movw	r30, r28
    2254:	e9 5a       	subi	r30, 0xA9	; 169
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	82 95       	swap	r24
    225c:	86 95       	lsr	r24
    225e:	87 70       	andi	r24, 0x07	; 7
    2260:	98 2f       	mov	r25, r24
    2262:	91 70       	andi	r25, 0x01	; 1
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	65 e0       	ldi	r22, 0x05	; 5
    2268:	49 2f       	mov	r20, r25
    226a:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
    226e:	fe 01       	movw	r30, r28
    2270:	e9 5a       	subi	r30, 0xA9	; 169
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	82 95       	swap	r24
    2278:	8f 70       	andi	r24, 0x0F	; 15
    227a:	98 2f       	mov	r25, r24
    227c:	91 70       	andi	r25, 0x01	; 1
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	64 e0       	ldi	r22, 0x04	; 4
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>

			/**********the latch ************/

			DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	63 e0       	ldi	r22, 0x03	; 3
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
    2292:	fe 01       	movw	r30, r28
    2294:	ef 5a       	subi	r30, 0xAF	; 175
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a0 e8       	ldi	r26, 0x80	; 128
    229e:	bf e3       	ldi	r27, 0x3F	; 63
    22a0:	80 83       	st	Z, r24
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	a2 83       	std	Z+2, r26	; 0x02
    22a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	8e 01       	movw	r16, r28
    22aa:	03 5b       	subi	r16, 0xB3	; 179
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	fe 01       	movw	r30, r28
    22b0:	ef 5a       	subi	r30, 0xAF	; 175
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a e7       	ldi	r20, 0x7A	; 122
    22c2:	55 e4       	ldi	r21, 0x45	; 69
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	f8 01       	movw	r30, r16
    22ce:	80 83       	st	Z, r24
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	a2 83       	std	Z+2, r26	; 0x02
    22d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d6:	fe 01       	movw	r30, r28
    22d8:	e3 5b       	subi	r30, 0xB3	; 179
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	44 f4       	brge	.+16     	; 0x2304 <LCD_enuWriteAndLatch+0x156>
		__ticks = 1;
    22f4:	fe 01       	movw	r30, r28
    22f6:	e5 5b       	subi	r30, 0xB5	; 181
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    2302:	64 c0       	rjmp	.+200    	; 0x23cc <LCD_enuWriteAndLatch+0x21e>
	else if (__tmp > 65535)
    2304:	fe 01       	movw	r30, r28
    2306:	e3 5b       	subi	r30, 0xB3	; 179
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	0c f0       	brlt	.+2      	; 0x2324 <LCD_enuWriteAndLatch+0x176>
    2322:	43 c0       	rjmp	.+134    	; 0x23aa <LCD_enuWriteAndLatch+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	fe 01       	movw	r30, r28
    2326:	ef 5a       	subi	r30, 0xAF	; 175
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	8e 01       	movw	r16, r28
    2344:	05 5b       	subi	r16, 0xB5	; 181
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	f8 01       	movw	r30, r16
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	1f c0       	rjmp	.+62     	; 0x239a <LCD_enuWriteAndLatch+0x1ec>
    235c:	fe 01       	movw	r30, r28
    235e:	e7 5b       	subi	r30, 0xB7	; 183
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 e9       	ldi	r24, 0x90	; 144
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
    236a:	fe 01       	movw	r30, r28
    236c:	e7 5b       	subi	r30, 0xB7	; 183
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_enuWriteAndLatch+0x1c6>
    2378:	fe 01       	movw	r30, r28
    237a:	e7 5b       	subi	r30, 0xB7	; 183
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	de 01       	movw	r26, r28
    2384:	a5 5b       	subi	r26, 0xB5	; 181
    2386:	bf 4f       	sbci	r27, 0xFF	; 255
    2388:	fe 01       	movw	r30, r28
    238a:	e5 5b       	subi	r30, 0xB5	; 181
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	11 96       	adiw	r26, 0x01	; 1
    2396:	9c 93       	st	X, r25
    2398:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	fe 01       	movw	r30, r28
    239c:	e5 5b       	subi	r30, 0xB5	; 181
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	d1 f6       	brne	.-76     	; 0x235c <LCD_enuWriteAndLatch+0x1ae>
    23a8:	27 c0       	rjmp	.+78     	; 0x23f8 <LCD_enuWriteAndLatch+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23aa:	8e 01       	movw	r16, r28
    23ac:	05 5b       	subi	r16, 0xB5	; 181
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e3 5b       	subi	r30, 0xB3	; 179
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	f8 01       	movw	r30, r16
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
    23cc:	de 01       	movw	r26, r28
    23ce:	a9 5b       	subi	r26, 0xB9	; 185
    23d0:	bf 4f       	sbci	r27, 0xFF	; 255
    23d2:	fe 01       	movw	r30, r28
    23d4:	e5 5b       	subi	r30, 0xB5	; 181
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	8d 93       	st	X+, r24
    23de:	9c 93       	st	X, r25
    23e0:	fe 01       	movw	r30, r28
    23e2:	e9 5b       	subi	r30, 0xB9	; 185
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_enuWriteAndLatch+0x23c>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e9 5b       	subi	r30, 0xB9	; 185
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
			_delay_ms(1);
			DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	63 e0       	ldi	r22, 0x03	; 3
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
    2402:	fe 01       	movw	r30, r28
    2404:	ed 5b       	subi	r30, 0xBD	; 189
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	80 83       	st	Z, r24
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	a2 83       	std	Z+2, r26	; 0x02
    2416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	8e 01       	movw	r16, r28
    241a:	01 5c       	subi	r16, 0xC1	; 193
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	ed 5b       	subi	r30, 0xBD	; 189
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a e7       	ldi	r20, 0x7A	; 122
    2432:	55 e4       	ldi	r21, 0x45	; 69
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	f8 01       	movw	r30, r16
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2446:	fe 01       	movw	r30, r28
    2448:	ff 96       	adiw	r30, 0x3f	; 63
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_enuWriteAndLatch+0x2be>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9e af       	std	Y+62, r25	; 0x3e
    2468:	8d af       	std	Y+61, r24	; 0x3d
    246a:	46 c0       	rjmp	.+140    	; 0x24f8 <LCD_enuWriteAndLatch+0x34a>
	else if (__tmp > 65535)
    246c:	fe 01       	movw	r30, r28
    246e:	ff 96       	adiw	r30, 0x3f	; 63
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	64 f5       	brge	.+88     	; 0x24e0 <LCD_enuWriteAndLatch+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	fe 01       	movw	r30, r28
    248a:	ed 5b       	subi	r30, 0xBD	; 189
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e af       	std	Y+62, r25	; 0x3e
    24b4:	8d af       	std	Y+61, r24	; 0x3d
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <LCD_enuWriteAndLatch+0x328>
    24b8:	80 e9       	ldi	r24, 0x90	; 144
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	9c af       	std	Y+60, r25	; 0x3c
    24be:	8b af       	std	Y+59, r24	; 0x3b
    24c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_enuWriteAndLatch+0x316>
    24c8:	9c af       	std	Y+60, r25	; 0x3c
    24ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9e af       	std	Y+62, r25	; 0x3e
    24d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <LCD_enuWriteAndLatch+0x30a>
    24de:	16 c0       	rjmp	.+44     	; 0x250c <LCD_enuWriteAndLatch+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	fe 01       	movw	r30, r28
    24e2:	ff 96       	adiw	r30, 0x3f	; 63
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9e af       	std	Y+62, r25	; 0x3e
    24f6:	8d af       	std	Y+61, r24	; 0x3d
    24f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fc:	9a af       	std	Y+58, r25	; 0x3a
    24fe:	89 af       	std	Y+57, r24	; 0x39
    2500:	89 ad       	ldd	r24, Y+57	; 0x39
    2502:	9a ad       	ldd	r25, Y+58	; 0x3a
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_enuWriteAndLatch+0x356>
    2508:	9a af       	std	Y+58, r25	; 0x3a
    250a:	89 af       	std	Y+57, r24	; 0x39

		}
	}
#if LCD_MODE == FOUR_BIT
	//4-4
	DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
    250c:	fe 01       	movw	r30, r28
    250e:	e9 5a       	subi	r30, 0xA9	; 169
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	98 2f       	mov	r25, r24
    2516:	99 1f       	adc	r25, r25
    2518:	99 27       	eor	r25, r25
    251a:	99 1f       	adc	r25, r25
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	67 e0       	ldi	r22, 0x07	; 7
    2520:	49 2f       	mov	r20, r25
    2522:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
    2526:	fe 01       	movw	r30, r28
    2528:	e9 5a       	subi	r30, 0xA9	; 169
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	82 95       	swap	r24
    2530:	86 95       	lsr	r24
    2532:	86 95       	lsr	r24
    2534:	83 70       	andi	r24, 0x03	; 3
    2536:	98 2f       	mov	r25, r24
    2538:	91 70       	andi	r25, 0x01	; 1
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	66 e0       	ldi	r22, 0x06	; 6
    253e:	49 2f       	mov	r20, r25
    2540:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
    2544:	fe 01       	movw	r30, r28
    2546:	e9 5a       	subi	r30, 0xA9	; 169
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	82 95       	swap	r24
    254e:	86 95       	lsr	r24
    2550:	87 70       	andi	r24, 0x07	; 7
    2552:	98 2f       	mov	r25, r24
    2554:	91 70       	andi	r25, 0x01	; 1
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	65 e0       	ldi	r22, 0x05	; 5
    255a:	49 2f       	mov	r20, r25
    255c:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
    2560:	fe 01       	movw	r30, r28
    2562:	e9 5a       	subi	r30, 0xA9	; 169
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	82 95       	swap	r24
    256a:	8f 70       	andi	r24, 0x0F	; 15
    256c:	98 2f       	mov	r25, r24
    256e:	91 70       	andi	r25, 0x01	; 1
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	64 e0       	ldi	r22, 0x04	; 4
    2574:	49 2f       	mov	r20, r25
    2576:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	/*		the latch		*/
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	63 e0       	ldi	r22, 0x03	; 3
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e8       	ldi	r26, 0x80	; 128
    258a:	bf e3       	ldi	r27, 0x3F	; 63
    258c:	8d ab       	std	Y+53, r24	; 0x35
    258e:	9e ab       	std	Y+54, r25	; 0x36
    2590:	af ab       	std	Y+55, r26	; 0x37
    2592:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6d a9       	ldd	r22, Y+53	; 0x35
    2596:	7e a9       	ldd	r23, Y+54	; 0x36
    2598:	8f a9       	ldd	r24, Y+55	; 0x37
    259a:	98 ad       	ldd	r25, Y+56	; 0x38
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a e7       	ldi	r20, 0x7A	; 122
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	89 ab       	std	Y+49, r24	; 0x31
    25ae:	9a ab       	std	Y+50, r25	; 0x32
    25b0:	ab ab       	std	Y+51, r26	; 0x33
    25b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25b4:	69 a9       	ldd	r22, Y+49	; 0x31
    25b6:	7a a9       	ldd	r23, Y+50	; 0x32
    25b8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ba:	9c a9       	ldd	r25, Y+52	; 0x34
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_enuWriteAndLatch+0x428>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	98 ab       	std	Y+48, r25	; 0x30
    25d2:	8f a7       	std	Y+47, r24	; 0x2f
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <LCD_enuWriteAndLatch+0x4a6>
	else if (__tmp > 65535)
    25d6:	69 a9       	ldd	r22, Y+49	; 0x31
    25d8:	7a a9       	ldd	r23, Y+50	; 0x32
    25da:	8b a9       	ldd	r24, Y+51	; 0x33
    25dc:	9c a9       	ldd	r25, Y+52	; 0x34
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <LCD_enuWriteAndLatch+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6d a9       	ldd	r22, Y+53	; 0x35
    25f0:	7e a9       	ldd	r23, Y+54	; 0x36
    25f2:	8f a9       	ldd	r24, Y+55	; 0x37
    25f4:	98 ad       	ldd	r25, Y+56	; 0x38
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	98 ab       	std	Y+48, r25	; 0x30
    2614:	8f a7       	std	Y+47, r24	; 0x2f
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_enuWriteAndLatch+0x488>
    2618:	80 e9       	ldi	r24, 0x90	; 144
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	9e a7       	std	Y+46, r25	; 0x2e
    261e:	8d a7       	std	Y+45, r24	; 0x2d
    2620:	8d a5       	ldd	r24, Y+45	; 0x2d
    2622:	9e a5       	ldd	r25, Y+46	; 0x2e
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_enuWriteAndLatch+0x476>
    2628:	9e a7       	std	Y+46, r25	; 0x2e
    262a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8f a5       	ldd	r24, Y+47	; 0x2f
    262e:	98 a9       	ldd	r25, Y+48	; 0x30
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	98 ab       	std	Y+48, r25	; 0x30
    2634:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8f a5       	ldd	r24, Y+47	; 0x2f
    2638:	98 a9       	ldd	r25, Y+48	; 0x30
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_enuWriteAndLatch+0x46a>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <LCD_enuWriteAndLatch+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	69 a9       	ldd	r22, Y+49	; 0x31
    2642:	7a a9       	ldd	r23, Y+50	; 0x32
    2644:	8b a9       	ldd	r24, Y+51	; 0x33
    2646:	9c a9       	ldd	r25, Y+52	; 0x34
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	98 ab       	std	Y+48, r25	; 0x30
    2652:	8f a7       	std	Y+47, r24	; 0x2f
    2654:	8f a5       	ldd	r24, Y+47	; 0x2f
    2656:	98 a9       	ldd	r25, Y+48	; 0x30
    2658:	9c a7       	std	Y+44, r25	; 0x2c
    265a:	8b a7       	std	Y+43, r24	; 0x2b
    265c:	8b a5       	ldd	r24, Y+43	; 0x2b
    265e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_enuWriteAndLatch+0x4b2>
    2664:	9c a7       	std	Y+44, r25	; 0x2c
    2666:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	63 e0       	ldi	r22, 0x03	; 3
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a0 e8       	ldi	r26, 0x80	; 128
    2678:	bf e3       	ldi	r27, 0x3F	; 63
    267a:	8f a3       	std	Y+39, r24	; 0x27
    267c:	98 a7       	std	Y+40, r25	; 0x28
    267e:	a9 a7       	std	Y+41, r26	; 0x29
    2680:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2682:	6f a1       	ldd	r22, Y+39	; 0x27
    2684:	78 a5       	ldd	r23, Y+40	; 0x28
    2686:	89 a5       	ldd	r24, Y+41	; 0x29
    2688:	9a a5       	ldd	r25, Y+42	; 0x2a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a e7       	ldi	r20, 0x7A	; 122
    2690:	55 e4       	ldi	r21, 0x45	; 69
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	8b a3       	std	Y+35, r24	; 0x23
    269c:	9c a3       	std	Y+36, r25	; 0x24
    269e:	ad a3       	std	Y+37, r26	; 0x25
    26a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26a2:	6b a1       	ldd	r22, Y+35	; 0x23
    26a4:	7c a1       	ldd	r23, Y+36	; 0x24
    26a6:	8d a1       	ldd	r24, Y+37	; 0x25
    26a8:	9e a1       	ldd	r25, Y+38	; 0x26
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e8       	ldi	r20, 0x80	; 128
    26b0:	5f e3       	ldi	r21, 0x3F	; 63
    26b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b6:	88 23       	and	r24, r24
    26b8:	2c f4       	brge	.+10     	; 0x26c4 <LCD_enuWriteAndLatch+0x516>
		__ticks = 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9a a3       	std	Y+34, r25	; 0x22
    26c0:	89 a3       	std	Y+33, r24	; 0x21
    26c2:	3f c0       	rjmp	.+126    	; 0x2742 <LCD_enuWriteAndLatch+0x594>
	else if (__tmp > 65535)
    26c4:	6b a1       	ldd	r22, Y+35	; 0x23
    26c6:	7c a1       	ldd	r23, Y+36	; 0x24
    26c8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ca:	9e a1       	ldd	r25, Y+38	; 0x26
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d8:	18 16       	cp	r1, r24
    26da:	4c f5       	brge	.+82     	; 0x272e <LCD_enuWriteAndLatch+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26dc:	6f a1       	ldd	r22, Y+39	; 0x27
    26de:	78 a5       	ldd	r23, Y+40	; 0x28
    26e0:	89 a5       	ldd	r24, Y+41	; 0x29
    26e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e2       	ldi	r20, 0x20	; 32
    26ea:	51 e4       	ldi	r21, 0x41	; 65
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9a a3       	std	Y+34, r25	; 0x22
    2702:	89 a3       	std	Y+33, r24	; 0x21
    2704:	0f c0       	rjmp	.+30     	; 0x2724 <LCD_enuWriteAndLatch+0x576>
    2706:	80 e9       	ldi	r24, 0x90	; 144
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	98 a3       	std	Y+32, r25	; 0x20
    270c:	8f 8f       	std	Y+31, r24	; 0x1f
    270e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2710:	98 a1       	ldd	r25, Y+32	; 0x20
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_enuWriteAndLatch+0x564>
    2716:	98 a3       	std	Y+32, r25	; 0x20
    2718:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271a:	89 a1       	ldd	r24, Y+33	; 0x21
    271c:	9a a1       	ldd	r25, Y+34	; 0x22
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	9a a3       	std	Y+34, r25	; 0x22
    2722:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	89 a1       	ldd	r24, Y+33	; 0x21
    2726:	9a a1       	ldd	r25, Y+34	; 0x22
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	69 f7       	brne	.-38     	; 0x2706 <LCD_enuWriteAndLatch+0x558>
    272c:	14 c0       	rjmp	.+40     	; 0x2756 <LCD_enuWriteAndLatch+0x5a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272e:	6b a1       	ldd	r22, Y+35	; 0x23
    2730:	7c a1       	ldd	r23, Y+36	; 0x24
    2732:	8d a1       	ldd	r24, Y+37	; 0x25
    2734:	9e a1       	ldd	r25, Y+38	; 0x26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
    2742:	89 a1       	ldd	r24, Y+33	; 0x21
    2744:	9a a1       	ldd	r25, Y+34	; 0x22
    2746:	9e 8f       	std	Y+30, r25	; 0x1e
    2748:	8d 8f       	std	Y+29, r24	; 0x1d
    274a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    274c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <LCD_enuWriteAndLatch+0x5a0>
    2752:	9e 8f       	std	Y+30, r25	; 0x1e
    2754:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
    2756:	fe 01       	movw	r30, r28
    2758:	e9 5a       	subi	r30, 0xA9	; 169
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	86 95       	lsr	r24
    2760:	86 95       	lsr	r24
    2762:	86 95       	lsr	r24
    2764:	98 2f       	mov	r25, r24
    2766:	91 70       	andi	r25, 0x01	; 1
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	67 e0       	ldi	r22, 0x07	; 7
    276c:	49 2f       	mov	r20, r25
    276e:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
    2772:	fe 01       	movw	r30, r28
    2774:	e9 5a       	subi	r30, 0xA9	; 169
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	86 95       	lsr	r24
    277c:	86 95       	lsr	r24
    277e:	98 2f       	mov	r25, r24
    2780:	91 70       	andi	r25, 0x01	; 1
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	66 e0       	ldi	r22, 0x06	; 6
    2786:	49 2f       	mov	r20, r25
    2788:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
    278c:	fe 01       	movw	r30, r28
    278e:	e9 5a       	subi	r30, 0xA9	; 169
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	86 95       	lsr	r24
    2796:	98 2f       	mov	r25, r24
    2798:	91 70       	andi	r25, 0x01	; 1
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	65 e0       	ldi	r22, 0x05	; 5
    279e:	49 2f       	mov	r20, r25
    27a0:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
    27a4:	fe 01       	movw	r30, r28
    27a6:	e9 5a       	subi	r30, 0xA9	; 169
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	98 2f       	mov	r25, r24
    27ae:	91 70       	andi	r25, 0x01	; 1
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	64 e0       	ldi	r22, 0x04	; 4
    27b4:	49 2f       	mov	r20, r25
    27b6:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	/*		the latch		*/
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	63 e0       	ldi	r22, 0x03	; 3
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e8       	ldi	r26, 0x80	; 128
    27ca:	bf e3       	ldi	r27, 0x3F	; 63
    27cc:	89 8f       	std	Y+25, r24	; 0x19
    27ce:	9a 8f       	std	Y+26, r25	; 0x1a
    27d0:	ab 8f       	std	Y+27, r26	; 0x1b
    27d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	69 8d       	ldd	r22, Y+25	; 0x19
    27d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a e7       	ldi	r20, 0x7A	; 122
    27e2:	55 e4       	ldi	r21, 0x45	; 69
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8d 8b       	std	Y+21, r24	; 0x15
    27ee:	9e 8b       	std	Y+22, r25	; 0x16
    27f0:	af 8b       	std	Y+23, r26	; 0x17
    27f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27f4:	6d 89       	ldd	r22, Y+21	; 0x15
    27f6:	7e 89       	ldd	r23, Y+22	; 0x16
    27f8:	8f 89       	ldd	r24, Y+23	; 0x17
    27fa:	98 8d       	ldd	r25, Y+24	; 0x18
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <LCD_enuWriteAndLatch+0x668>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9c 8b       	std	Y+20, r25	; 0x14
    2812:	8b 8b       	std	Y+19, r24	; 0x13
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <LCD_enuWriteAndLatch+0x6e6>
	else if (__tmp > 65535)
    2816:	6d 89       	ldd	r22, Y+21	; 0x15
    2818:	7e 89       	ldd	r23, Y+22	; 0x16
    281a:	8f 89       	ldd	r24, Y+23	; 0x17
    281c:	98 8d       	ldd	r25, Y+24	; 0x18
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <LCD_enuWriteAndLatch+0x6d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	69 8d       	ldd	r22, Y+25	; 0x19
    2830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9c 8b       	std	Y+20, r25	; 0x14
    2854:	8b 8b       	std	Y+19, r24	; 0x13
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <LCD_enuWriteAndLatch+0x6c8>
    2858:	80 e9       	ldi	r24, 0x90	; 144
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	9a 8b       	std	Y+18, r25	; 0x12
    285e:	89 8b       	std	Y+17, r24	; 0x11
    2860:	89 89       	ldd	r24, Y+17	; 0x11
    2862:	9a 89       	ldd	r25, Y+18	; 0x12
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_enuWriteAndLatch+0x6b6>
    2868:	9a 8b       	std	Y+18, r25	; 0x12
    286a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8b 89       	ldd	r24, Y+19	; 0x13
    2878:	9c 89       	ldd	r25, Y+20	; 0x14
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <LCD_enuWriteAndLatch+0x6aa>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <LCD_enuWriteAndLatch+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	6d 89       	ldd	r22, Y+21	; 0x15
    2882:	7e 89       	ldd	r23, Y+22	; 0x16
    2884:	8f 89       	ldd	r24, Y+23	; 0x17
    2886:	98 8d       	ldd	r25, Y+24	; 0x18
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9c 8b       	std	Y+20, r25	; 0x14
    2892:	8b 8b       	std	Y+19, r24	; 0x13
    2894:	8b 89       	ldd	r24, Y+19	; 0x13
    2896:	9c 89       	ldd	r25, Y+20	; 0x14
    2898:	98 8b       	std	Y+16, r25	; 0x10
    289a:	8f 87       	std	Y+15, r24	; 0x0f
    289c:	8f 85       	ldd	r24, Y+15	; 0x0f
    289e:	98 89       	ldd	r25, Y+16	; 0x10
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_enuWriteAndLatch+0x6f2>
    28a4:	98 8b       	std	Y+16, r25	; 0x10
    28a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	63 e0       	ldi	r22, 0x03	; 3
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e8       	ldi	r26, 0x80	; 128
    28b8:	bf e3       	ldi	r27, 0x3F	; 63
    28ba:	8b 87       	std	Y+11, r24	; 0x0b
    28bc:	9c 87       	std	Y+12, r25	; 0x0c
    28be:	ad 87       	std	Y+13, r26	; 0x0d
    28c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a e7       	ldi	r20, 0x7A	; 122
    28d0:	55 e4       	ldi	r21, 0x45	; 69
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8f 83       	std	Y+7, r24	; 0x07
    28dc:	98 87       	std	Y+8, r25	; 0x08
    28de:	a9 87       	std	Y+9, r26	; 0x09
    28e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e2:	6f 81       	ldd	r22, Y+7	; 0x07
    28e4:	78 85       	ldd	r23, Y+8	; 0x08
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <LCD_enuWriteAndLatch+0x756>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <LCD_enuWriteAndLatch+0x7d4>
	else if (__tmp > 65535)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <LCD_enuWriteAndLatch+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <LCD_enuWriteAndLatch+0x7b6>
    2946:	80 e9       	ldi	r24, 0x90	; 144
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_enuWriteAndLatch+0x7a4>
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <LCD_enuWriteAndLatch+0x798>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <LCD_enuWriteAndLatch+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LCD_enuWriteAndLatch+0x7e0>
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01

#else
#error"LCD mode is wrong"

#endif
	return Local_ErrorState;
    2996:	fe 01       	movw	r30, r28
    2998:	eb 5a       	subi	r30, 0xAB	; 171
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
}
    299e:	c9 5a       	subi	r28, 0xA9	; 169
    29a0:	df 4f       	sbci	r29, 0xFF	; 255
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	08 95       	ret

000029b6 <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 Copy_u8Data) {
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <LCD_enuSendData+0x6>
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = ES_NOK;
    29c2:	82 e0       	ldi	r24, 0x02	; 2
    29c4:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	61 e0       	ldi	r22, 0x01	; 1
    29ca:	41 e0       	ldi	r20, 0x01	; 1
    29cc:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>

	LCD_enuWriteAndLatch(Copy_u8Data);
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

	return Local_ErrorState;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command) {
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <LCD_enuSendCommand+0x6>
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_ErrorState = ES_NOK;
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);	//Low for Command
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>

	LCD_enuWriteAndLatch(Copy_u8Command);
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

	return Local_ErrorState;
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <LCD_enuSendString>:

ES_t LCD_enuSendString(const char * Copy_pcString) {
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <LCD_enuSendString+0x6>
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9b 83       	std	Y+3, r25	; 0x03
    2a1c:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_ErrorState = ES_NOK;
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	10 c0       	rjmp	.+32     	; 0x2a44 <LCD_enuSendString+0x36>

	while (*Copy_pcString != 0) //notic 0 == \0(end of string seq)    but '0' == ASCII of 48
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);	// High for Data
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	41 e0       	ldi	r20, 0x01	; 1
    2a2a:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch(*Copy_pcString++);
    2a2e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a30:	fb 81       	ldd	r31, Y+3	; 0x03
    2a32:	20 81       	ld	r18, Z
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	9b 83       	std	Y+3, r25	; 0x03
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
    2a3e:	82 2f       	mov	r24, r18
    2a40:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

ES_t LCD_enuSendString(const char * Copy_pcString) {

	u8 Local_ErrorState = ES_NOK;

	while (*Copy_pcString != 0) //notic 0 == \0(end of string seq)    but '0' == ASCII of 48
    2a44:	ea 81       	ldd	r30, Y+2	; 0x02
    2a46:	fb 81       	ldd	r31, Y+3	; 0x03
    2a48:	80 81       	ld	r24, Z
    2a4a:	88 23       	and	r24, r24
    2a4c:	59 f7       	brne	.-42     	; 0x2a24 <LCD_enuSendString+0x16>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);	// High for Data
		LCD_enuWriteAndLatch(*Copy_pcString++);
	}

	return Local_ErrorState;
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay(void) {
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	6d 97       	sbiw	r28, 0x1d	; 29
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_ErrorState = ES_NOK;
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	8d 8f       	std	Y+29, r24	; 0x1d
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	a0 e8       	ldi	r26, 0x80	; 128
    2a7a:	bf e3       	ldi	r27, 0x3F	; 63
    2a7c:	89 8f       	std	Y+25, r24	; 0x19
    2a7e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a80:	ab 8f       	std	Y+27, r26	; 0x1b
    2a82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a84:	69 8d       	ldd	r22, Y+25	; 0x19
    2a86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	4a e7       	ldi	r20, 0x7A	; 122
    2a92:	55 e4       	ldi	r21, 0x45	; 69
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	8d 8b       	std	Y+21, r24	; 0x15
    2a9e:	9e 8b       	std	Y+22, r25	; 0x16
    2aa0:	af 8b       	std	Y+23, r26	; 0x17
    2aa2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e8       	ldi	r20, 0x80	; 128
    2ab2:	5f e3       	ldi	r21, 0x3F	; 63
    2ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab8:	88 23       	and	r24, r24
    2aba:	2c f4       	brge	.+10     	; 0x2ac6 <LCD_enuClearDisplay+0x6a>
		__ticks = 1;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	9c 8b       	std	Y+20, r25	; 0x14
    2ac2:	8b 8b       	std	Y+19, r24	; 0x13
    2ac4:	3f c0       	rjmp	.+126    	; 0x2b44 <LCD_enuClearDisplay+0xe8>
	else if (__tmp > 65535)
    2ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aca:	8f 89       	ldd	r24, Y+23	; 0x17
    2acc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	3f ef       	ldi	r19, 0xFF	; 255
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	57 e4       	ldi	r21, 0x47	; 71
    2ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	4c f5       	brge	.+82     	; 0x2b30 <LCD_enuClearDisplay+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ade:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e2       	ldi	r20, 0x20	; 32
    2aec:	51 e4       	ldi	r21, 0x41	; 65
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	bc 01       	movw	r22, r24
    2af8:	cd 01       	movw	r24, r26
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9c 8b       	std	Y+20, r25	; 0x14
    2b04:	8b 8b       	std	Y+19, r24	; 0x13
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <LCD_enuClearDisplay+0xca>
    2b08:	80 e9       	ldi	r24, 0x90	; 144
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	9a 8b       	std	Y+18, r25	; 0x12
    2b0e:	89 8b       	std	Y+17, r24	; 0x11
    2b10:	89 89       	ldd	r24, Y+17	; 0x11
    2b12:	9a 89       	ldd	r25, Y+18	; 0x12
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <LCD_enuClearDisplay+0xb8>
    2b18:	9a 8b       	std	Y+18, r25	; 0x12
    2b1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	9c 8b       	std	Y+20, r25	; 0x14
    2b24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	69 f7       	brne	.-38     	; 0x2b08 <LCD_enuClearDisplay+0xac>
    2b2e:	14 c0       	rjmp	.+40     	; 0x2b58 <LCD_enuClearDisplay+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b30:	6d 89       	ldd	r22, Y+21	; 0x15
    2b32:	7e 89       	ldd	r23, Y+22	; 0x16
    2b34:	8f 89       	ldd	r24, Y+23	; 0x17
    2b36:	98 8d       	ldd	r25, Y+24	; 0x18
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9c 8b       	std	Y+20, r25	; 0x14
    2b42:	8b 8b       	std	Y+19, r24	; 0x13
    2b44:	8b 89       	ldd	r24, Y+19	; 0x13
    2b46:	9c 89       	ldd	r25, Y+20	; 0x14
    2b48:	98 8b       	std	Y+16, r25	; 0x10
    2b4a:	8f 87       	std	Y+15, r24	; 0x0f
    2b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4e:	98 89       	ldd	r25, Y+16	; 0x10
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <LCD_enuClearDisplay+0xf4>
    2b54:	98 8b       	std	Y+16, r25	; 0x10
    2b56:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 e0       	ldi	r26, 0x00	; 0
    2b6e:	b0 e4       	ldi	r27, 0x40	; 64
    2b70:	8b 87       	std	Y+11, r24	; 0x0b
    2b72:	9c 87       	std	Y+12, r25	; 0x0c
    2b74:	ad 87       	std	Y+13, r26	; 0x0d
    2b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	55 e4       	ldi	r21, 0x45	; 69
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8f 83       	std	Y+7, r24	; 0x07
    2b92:	98 87       	std	Y+8, r25	; 0x08
    2b94:	a9 87       	std	Y+9, r26	; 0x09
    2b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <LCD_enuClearDisplay+0x15e>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <LCD_enuClearDisplay+0x1dc>
	else if (__tmp > 65535)
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <LCD_enuClearDisplay+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <LCD_enuClearDisplay+0x1be>
    2bfc:	80 e9       	ldi	r24, 0x90	; 144
    2bfe:	91 e0       	ldi	r25, 0x01	; 1
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_enuClearDisplay+0x1ac>
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <LCD_enuClearDisplay+0x1a0>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <LCD_enuClearDisplay+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_enuClearDisplay+0x1e8>
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	return Local_ErrorState;
    2c4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2c4e:	6d 96       	adiw	r28, 0x1d	; 29
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <LCD_enuJumpCursorTo>:

ES_t LCD_enuJumpCursorTo(u8 Copy_u8StartX_Position, u8 Copy_u8StartY_Position) {
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <LCD_enuJumpCursorTo+0x6>
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	8a 83       	std	Y+2, r24	; 0x02
    2c6e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_ErrorState = ES_NOK;
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	89 83       	std	Y+1, r24	; 0x01

//	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);   // Low for Command
	if (Copy_u8StartX_Position == 1) {
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	81 30       	cpi	r24, 0x01	; 1
    2c78:	59 f4       	brne	.+22     	; 0x2c90 <LCD_enuJumpCursorTo+0x30>
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);   // Low for Command
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	61 e0       	ldi	r22, 0x01	; 1
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch((START_OF_LINE1 + Copy_u8StartY_Position));
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	80 58       	subi	r24, 0x80	; 128
    2c88:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
    2c8c:	19 82       	std	Y+1, r1	; 0x01
    2c8e:	10 c0       	rjmp	.+32     	; 0x2cb0 <LCD_enuJumpCursorTo+0x50>
	}

	else if (Copy_u8StartX_Position == 2) {
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	82 30       	cpi	r24, 0x02	; 2
    2c94:	59 f4       	brne	.+22     	; 0x2cac <LCD_enuJumpCursorTo+0x4c>
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);   // Low for Command
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	61 e0       	ldi	r22, 0x01	; 1
    2c9a:	40 e0       	ldi	r20, 0x00	; 0
    2c9c:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch((START_OF_LINE2 + Copy_u8StartY_Position));
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	80 54       	subi	r24, 0x40	; 64
    2ca4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
    2ca8:	19 82       	std	Y+1, r1	; 0x01
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <LCD_enuJumpCursorTo+0x50>
	} else {
		Local_ErrorState = ES_OUT_OF_RANGE;
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_enuDisplayIntNum>:
//
//
//	return Local_ErrorState;
//}

ES_t LCD_enuDisplayIntNum(s32 Copy_s32IntNumber) {
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	2f 97       	sbiw	r28, 0x0f	; 15
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	6c 87       	std	Y+12, r22	; 0x0c
    2cd4:	7d 87       	std	Y+13, r23	; 0x0d
    2cd6:	8e 87       	std	Y+14, r24	; 0x0e
    2cd8:	9f 87       	std	Y+15, r25	; 0x0f

	u8 Local_ErrorState = ES_NOK;
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	8b 87       	std	Y+11, r24	; 0x0b

	u32 Local_u32Remainder;
	u32 Local_u32ReverseNum = 0;
    2cde:	1b 82       	std	Y+3, r1	; 0x03
    2ce0:	1c 82       	std	Y+4, r1	; 0x04
    2ce2:	1d 82       	std	Y+5, r1	; 0x05
    2ce4:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8DigitsNum = 0;
    2ce6:	1a 82       	std	Y+2, r1	; 0x02
	/******** number givin will be diplayed reversly cause of lcd prints each number of the whole number individualy ******/
	/*********  so we will reverse the whole number just to be displayed correctly at the end of function **********/
	if (Copy_s32IntNumber < 0) {
    2ce8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cea:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cec:	ae 85       	ldd	r26, Y+14	; 0x0e
    2cee:	bf 85       	ldd	r27, Y+15	; 0x0f
    2cf0:	bb 23       	and	r27, r27
    2cf2:	0c f0       	brlt	.+2      	; 0x2cf6 <LCD_enuDisplayIntNum+0x38>
    2cf4:	59 c0       	rjmp	.+178    	; 0x2da8 <LCD_enuDisplayIntNum+0xea>
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   //high for data
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	41 e0       	ldi	r20, 0x01	; 1
    2cfc:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch('-');
    2d00:	8d e2       	ldi	r24, 0x2D	; 45
    2d02:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

		Copy_s32IntNumber *= -1; //after printing negative sign we convert the number to positive and procced
    2d06:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d08:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d0a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2d0c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2d0e:	b0 95       	com	r27
    2d10:	a0 95       	com	r26
    2d12:	90 95       	com	r25
    2d14:	81 95       	neg	r24
    2d16:	9f 4f       	sbci	r25, 0xFF	; 255
    2d18:	af 4f       	sbci	r26, 0xFF	; 255
    2d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d1c:	8c 87       	std	Y+12, r24	; 0x0c
    2d1e:	9d 87       	std	Y+13, r25	; 0x0d
    2d20:	ae 87       	std	Y+14, r26	; 0x0e
    2d22:	bf 87       	std	Y+15, r27	; 0x0f
    2d24:	41 c0       	rjmp	.+130    	; 0x2da8 <LCD_enuDisplayIntNum+0xea>
	}

	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
			{
		Local_u32Remainder = Copy_s32IntNumber % 10;
    2d26:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d28:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d2a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2d2c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2d2e:	2a e0       	ldi	r18, 0x0A	; 10
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__divmodsi4>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	8f 83       	std	Y+7, r24	; 0x07
    2d44:	98 87       	std	Y+8, r25	; 0x08
    2d46:	a9 87       	std	Y+9, r26	; 0x09
    2d48:	ba 87       	std	Y+10, r27	; 0x0a
		Local_u32ReverseNum = Local_u32ReverseNum * 10 + Local_u32Remainder;
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	ad 81       	ldd	r26, Y+5	; 0x05
    2d50:	be 81       	ldd	r27, Y+6	; 0x06
    2d52:	2a e0       	ldi	r18, 0x0A	; 10
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__mulsi3>
    2d62:	9b 01       	movw	r18, r22
    2d64:	ac 01       	movw	r20, r24
    2d66:	8f 81       	ldd	r24, Y+7	; 0x07
    2d68:	98 85       	ldd	r25, Y+8	; 0x08
    2d6a:	a9 85       	ldd	r26, Y+9	; 0x09
    2d6c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d6e:	82 0f       	add	r24, r18
    2d70:	93 1f       	adc	r25, r19
    2d72:	a4 1f       	adc	r26, r20
    2d74:	b5 1f       	adc	r27, r21
    2d76:	8b 83       	std	Y+3, r24	; 0x03
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	ad 83       	std	Y+5, r26	; 0x05
    2d7c:	be 83       	std	Y+6, r27	; 0x06
		Local_u8DigitsNum++; //counting number of digits for the original number
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuWriteAndLatch('-');

		Copy_s32IntNumber *= -1; //after printing negative sign we convert the number to positive and procced
	}

	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
    2d84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d86:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d88:	ae 85       	ldd	r26, Y+14	; 0x0e
    2d8a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2d8c:	2a e0       	ldi	r18, 0x0A	; 10
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e0       	ldi	r20, 0x00	; 0
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__divmodsi4>
    2d9c:	da 01       	movw	r26, r20
    2d9e:	c9 01       	movw	r24, r18
    2da0:	8c 87       	std	Y+12, r24	; 0x0c
    2da2:	9d 87       	std	Y+13, r25	; 0x0d
    2da4:	ae 87       	std	Y+14, r26	; 0x0e
    2da6:	bf 87       	std	Y+15, r27	; 0x0f
    2da8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2daa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dac:	ae 85       	ldd	r26, Y+14	; 0x0e
    2dae:	bf 85       	ldd	r27, Y+15	; 0x0f
    2db0:	18 16       	cp	r1, r24
    2db2:	19 06       	cpc	r1, r25
    2db4:	1a 06       	cpc	r1, r26
    2db6:	1b 06       	cpc	r1, r27
    2db8:	0c f4       	brge	.+2      	; 0x2dbc <LCD_enuDisplayIntNum+0xfe>
    2dba:	b5 cf       	rjmp	.-150    	; 0x2d26 <LCD_enuDisplayIntNum+0x68>
    2dbc:	2d c0       	rjmp	.+90     	; 0x2e18 <LCD_enuDisplayIntNum+0x15a>
	}

	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
			{ // for number of cycles equal to Local_u8DigitsNum , print digits

		u8 Local_u8NumToPrint = Local_u32ReverseNum % 10;
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	ad 81       	ldd	r26, Y+5	; 0x05
    2dc4:	be 81       	ldd	r27, Y+6	; 0x06
    2dc6:	2a e0       	ldi	r18, 0x0A	; 10
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__udivmodsi4>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	89 83       	std	Y+1, r24	; 0x01
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH); //high for data
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	61 e0       	ldi	r22, 0x01	; 1
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch(Local_u8NumToPrint + '0');
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	80 5d       	subi	r24, 0xD0	; 208
    2dea:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
		Local_u8DigitsNum--;
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	81 50       	subi	r24, 0x01	; 1
    2df2:	8a 83       	std	Y+2, r24	; 0x02
		Local_u32Remainder = Copy_s32IntNumber % 10;
		Local_u32ReverseNum = Local_u32ReverseNum * 10 + Local_u32Remainder;
		Local_u8DigitsNum++; //counting number of digits for the original number
	}

	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	ad 81       	ldd	r26, Y+5	; 0x05
    2dfa:	be 81       	ldd	r27, Y+6	; 0x06
    2dfc:	2a e0       	ldi	r18, 0x0A	; 10
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__udivmodsi4>
    2e0c:	da 01       	movw	r26, r20
    2e0e:	c9 01       	movw	r24, r18
    2e10:	8b 83       	std	Y+3, r24	; 0x03
    2e12:	9c 83       	std	Y+4, r25	; 0x04
    2e14:	ad 83       	std	Y+5, r26	; 0x05
    2e16:	be 83       	std	Y+6, r27	; 0x06
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	88 23       	and	r24, r24
    2e1c:	81 f6       	brne	.-96     	; 0x2dbe <LCD_enuDisplayIntNum+0x100>
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH); //high for data
		LCD_enuWriteAndLatch(Local_u8NumToPrint + '0');
		Local_u8DigitsNum--;
	}

	return Local_ErrorState;
    2e1e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    2e20:	2f 96       	adiw	r28, 0x0f	; 15
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <LCD_enuDisplayCustomArrCharachter>:

ES_t LCD_enuDisplayCustomArrCharachter(u8 * Copy_u8pAu8CharHEXA,
		u8 Copy_u8NumOfPattern, u8 Copy_u8InputDirection) {
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	27 97       	sbiw	r28, 0x07	; 7
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	9d 83       	std	Y+5, r25	; 0x05
    2e48:	8c 83       	std	Y+4, r24	; 0x04
    2e4a:	6e 83       	std	Y+6, r22	; 0x06
    2e4c:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_ErrorState = ES_NOK;
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	8b 83       	std	Y+3, r24	; 0x03

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	61 e0       	ldi	r22, 0x01	; 1
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(START_OF_CGRAM); //go to CG ram pattern 1 **  ( + pos*8)
    2e5c:	80 e4       	ldi	r24, 0x40	; 64
    2e5e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
	/********** pushing array characters to cgram	************/
	for (u8 Local_u8Local_Iterator = 0;
    2e62:	1a 82       	std	Y+2, r1	; 0x02
    2e64:	13 c0       	rjmp	.+38     	; 0x2e8c <LCD_enuDisplayCustomArrCharachter+0x5a>
			Local_u8Local_Iterator < (Copy_u8NumOfPattern * PATTERN_SIZE);
			Local_u8Local_Iterator++) {
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	61 e0       	ldi	r22, 0x01	; 1
    2e6a:	41 e0       	ldi	r20, 0x01	; 1
    2e6c:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch((Copy_u8pAu8CharHEXA[Local_u8Local_Iterator]));
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	28 2f       	mov	r18, r24
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e2 0f       	add	r30, r18
    2e7e:	f3 1f       	adc	r31, r19
    2e80:	80 81       	ld	r24, Z
    2e82:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
	LCD_enuWriteAndLatch(START_OF_CGRAM); //go to CG ram pattern 1 **  ( + pos*8)
	/********** pushing array characters to cgram	************/
	for (u8 Local_u8Local_Iterator = 0;
			Local_u8Local_Iterator < (Copy_u8NumOfPattern * PATTERN_SIZE);
			Local_u8Local_Iterator++) {
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	8a 83       	std	Y+2, r24	; 0x02

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
	LCD_enuWriteAndLatch(START_OF_CGRAM); //go to CG ram pattern 1 **  ( + pos*8)
	/********** pushing array characters to cgram	************/
	for (u8 Local_u8Local_Iterator = 0;
			Local_u8Local_Iterator < (Copy_u8NumOfPattern * PATTERN_SIZE);
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	8e 81       	ldd	r24, Y+6	; 0x06
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	28 17       	cp	r18, r24
    2ea6:	39 07       	cpc	r19, r25
    2ea8:	f4 f2       	brlt	.-68     	; 0x2e66 <LCD_enuDisplayCustomArrCharachter+0x34>
		/***** starting from address 0x40 of pat 1 so we can call them back by their address from ddram as usual ***/
	}
//	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW); //for cmd
//	LCD_enuWriteAndLatch(START_OF_LINE1);	//  command for ddram to display data starting from address mentioned

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	if (Copy_u8InputDirection == LEFT_INPUT)
    2eb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2eb6:	84 30       	cpi	r24, 0x04	; 4
    2eb8:	21 f4       	brne	.+8      	; 0x2ec2 <LCD_enuDisplayCustomArrCharachter+0x90>
		LCD_enuWriteAndLatch(ENGLISH_CURSOR_MODE); //Copy_u8InputDirection
    2eba:	86 e0       	ldi	r24, 0x06	; 6
    2ebc:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
    2ec0:	03 c0       	rjmp	.+6      	; 0x2ec8 <LCD_enuDisplayCustomArrCharachter+0x96>
	else
		LCD_enuWriteAndLatch(ARABIC_CURSOR_MODE);
    2ec2:	84 e0       	ldi	r24, 0x04	; 4
    2ec4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
	for (u8 Local_u8Local_Iterator = 0;
    2ec8:	19 82       	std	Y+1, r1	; 0x01
    2eca:	0b c0       	rjmp	.+22     	; 0x2ee2 <LCD_enuDisplayCustomArrCharachter+0xb0>
			Local_u8Local_Iterator < Copy_u8NumOfPattern;
			Local_u8Local_Iterator++) {
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	61 e0       	ldi	r22, 0x01	; 1
    2ed0:	41 e0       	ldi	r20, 0x01	; 1
    2ed2:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch(Local_u8Local_Iterator);
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
		LCD_enuWriteAndLatch(ENGLISH_CURSOR_MODE); //Copy_u8InputDirection
	else
		LCD_enuWriteAndLatch(ARABIC_CURSOR_MODE);
	for (u8 Local_u8Local_Iterator = 0;
			Local_u8Local_Iterator < Copy_u8NumOfPattern;
			Local_u8Local_Iterator++) {
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	8f 5f       	subi	r24, 0xFF	; 255
    2ee0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8InputDirection == LEFT_INPUT)
		LCD_enuWriteAndLatch(ENGLISH_CURSOR_MODE); //Copy_u8InputDirection
	else
		LCD_enuWriteAndLatch(ARABIC_CURSOR_MODE);
	for (u8 Local_u8Local_Iterator = 0;
			Local_u8Local_Iterator < Copy_u8NumOfPattern;
    2ee2:	99 81       	ldd	r25, Y+1	; 0x01
    2ee4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee6:	98 17       	cp	r25, r24
    2ee8:	88 f3       	brcs	.-30     	; 0x2ecc <LCD_enuDisplayCustomArrCharachter+0x9a>
			Local_u8Local_Iterator++) {
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
		LCD_enuWriteAndLatch(Local_u8Local_Iterator);
	}

	return Local_ErrorState;
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2eec:	27 96       	adiw	r28, 0x07	; 7
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <LCD_enuDisplayCustomSingleCharachter>:

ES_t LCD_enuDisplayCustomSingleCharachter(u8 * Copy_u8pAu8CharHEXA, u8 Copy_u8PatternPosition, u8 Copy_u8DisplayPosition){
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <LCD_enuDisplayCustomSingleCharachter+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <LCD_enuDisplayCustomSingleCharachter+0x8>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <LCD_enuDisplayCustomSingleCharachter+0xa>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
    2f10:	6d 83       	std	Y+5, r22	; 0x05
    2f12:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_ErrorState = ES_NOK;
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	8a 83       	std	Y+2, r24	; 0x02
	if (Copy_u8PatternPosition < 8) {
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	88 30       	cpi	r24, 0x08	; 8
    2f1c:	d0 f5       	brcc	.+116    	; 0x2f92 <LCD_enuDisplayCustomSingleCharachter+0x94>
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	40 e0       	ldi	r20, 0x00	; 0
    2f24:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch(START_OF_CGRAM + (Copy_u8PatternPosition * 8)); //go to CG ram pattern 1 **  ( + pos*8)
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	88 2f       	mov	r24, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	08 96       	adiw	r24, 0x08	; 8
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	88 0f       	add	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
		/********** pushing array characters to cgram	************/
		for (u8 Local_u8Local_Iterator = 0; Local_u8Local_Iterator < PATTERN_SIZE; Local_u8Local_Iterator++) {
    2f40:	19 82       	std	Y+1, r1	; 0x01
    2f42:	13 c0       	rjmp	.+38     	; 0x2f6a <LCD_enuDisplayCustomSingleCharachter+0x6c>
			DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	61 e0       	ldi	r22, 0x01	; 1
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
			LCD_enuWriteAndLatch((Copy_u8pAu8CharHEXA[Local_u8Local_Iterator]));
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	fc 01       	movw	r30, r24
    2f5a:	e2 0f       	add	r30, r18
    2f5c:	f3 1f       	adc	r31, r19
    2f5e:	80 81       	ld	r24, Z
    2f60:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
	u8 Local_ErrorState = ES_NOK;
	if (Copy_u8PatternPosition < 8) {
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
		LCD_enuWriteAndLatch(START_OF_CGRAM + (Copy_u8PatternPosition * 8)); //go to CG ram pattern 1 **  ( + pos*8)
		/********** pushing array characters to cgram	************/
		for (u8 Local_u8Local_Iterator = 0; Local_u8Local_Iterator < PATTERN_SIZE; Local_u8Local_Iterator++) {
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	89 83       	std	Y+1, r24	; 0x01
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	88 30       	cpi	r24, 0x08	; 8
    2f6e:	50 f3       	brcs	.-44     	; 0x2f44 <LCD_enuDisplayCustomSingleCharachter+0x46>
			DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
			LCD_enuWriteAndLatch((Copy_u8pAu8CharHEXA[Local_u8Local_Iterator]));
			/***** starting from address 0x40 of pat 1 so we can call them back by their address from ddram as usual ***/
		}
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	61 e0       	ldi	r22, 0x01	; 1
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch(START_OF_LINE1 + Copy_u8DisplayPosition);//  command for ddram to display data starting from address mentioned
    2f7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f7c:	80 58       	subi	r24, 0x80	; 128
    2f7e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

			DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	61 e0       	ldi	r22, 0x01	; 1
    2f86:	41 e0       	ldi	r20, 0x01	; 1
    2f88:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
			LCD_enuWriteAndLatch(Copy_u8PatternPosition);
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

	}
	return Local_ErrorState;
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f94:	26 96       	adiw	r28, 0x06	; 6
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <LCD_vidSavePattern>:

void LCD_vidSavePattern(u8 *Copy_u8pAu8CharHEXA,u8 Copy_u8PatternPosition){
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <LCD_vidSavePattern+0x6>
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <LCD_vidSavePattern+0x8>
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	9b 83       	std	Y+3, r25	; 0x03
    2fb4:	8a 83       	std	Y+2, r24	; 0x02
    2fb6:	6c 83       	std	Y+4, r22	; 0x04
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	61 e0       	ldi	r22, 0x01	; 1
    2fbc:	40 e0       	ldi	r20, 0x00	; 0
    2fbe:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(START_OF_CGRAM + (Copy_u8PatternPosition * 8)); //go to CG ram pattern 1 **  ( + pos*8)
    2fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	08 96       	adiw	r24, 0x08	; 8
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
	/********** pushing array characters to cgram	************/
	for (u8 Local_u8Local_Iterator = 0; Local_u8Local_Iterator < PATTERN_SIZE; Local_u8Local_Iterator++) {
    2fda:	19 82       	std	Y+1, r1	; 0x01
    2fdc:	13 c0       	rjmp	.+38     	; 0x3004 <LCD_vidSavePattern+0x5e>
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	61 e0       	ldi	r22, 0x01	; 1
    2fe2:	41 e0       	ldi	r20, 0x01	; 1
    2fe4:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		LCD_enuWriteAndLatch((Copy_u8pAu8CharHEXA[Local_u8Local_Iterator]));
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e2 0f       	add	r30, r18
    2ff6:	f3 1f       	adc	r31, r19
    2ff8:	80 81       	ld	r24, Z
    2ffa:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

void LCD_vidSavePattern(u8 *Copy_u8pAu8CharHEXA,u8 Copy_u8PatternPosition){
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
	LCD_enuWriteAndLatch(START_OF_CGRAM + (Copy_u8PatternPosition * 8)); //go to CG ram pattern 1 **  ( + pos*8)
	/********** pushing array characters to cgram	************/
	for (u8 Local_u8Local_Iterator = 0; Local_u8Local_Iterator < PATTERN_SIZE; Local_u8Local_Iterator++) {
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	8f 5f       	subi	r24, 0xFF	; 255
    3002:	89 83       	std	Y+1, r24	; 0x01
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	88 30       	cpi	r24, 0x08	; 8
    3008:	50 f3       	brcs	.-44     	; 0x2fde <LCD_vidSavePattern+0x38>
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
		LCD_enuWriteAndLatch((Copy_u8pAu8CharHEXA[Local_u8Local_Iterator]));
		/***** starting from address 0x40 of pat 1 so we can call them back by their address from ddram as usual ***/
	}
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <LCD_vidPrintPattern>:
void LCD_vidPrintPattern(u8 Copy_u8PatternNum,u8 Copy_u8PositionX,u8 Copy_u8PositionY){
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	00 d0       	rcall	.+0      	; 0x301e <LCD_vidPrintPattern+0x6>
    301e:	0f 92       	push	r0
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	6a 83       	std	Y+2, r22	; 0x02
    3028:	4b 83       	std	Y+3, r20	; 0x03
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW); //for cmd
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	if(Copy_u8PositionX == 1)
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	21 f4       	brne	.+8      	; 0x3042 <LCD_vidPrintPattern+0x2a>
		LCD_enuWriteAndLatch(START_OF_LINE1 + Copy_u8PositionY);//  command for ddram to display data starting from address mentioned
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	80 58       	subi	r24, 0x80	; 128
    303e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
	if(Copy_u8PositionY == 2)
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	82 30       	cpi	r24, 0x02	; 2
    3046:	21 f4       	brne	.+8      	; 0x3050 <LCD_vidPrintPattern+0x38>
		LCD_enuWriteAndLatch(START_OF_LINE2 + Copy_u8PositionY);//  command for ddram to display data starting from address mentioned
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	80 54       	subi	r24, 0x40	; 64
    304c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);   // High for Data
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	61 e0       	ldi	r22, 0x01	; 1
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	LCD_enuWriteAndLatch(Copy_u8PatternNum);
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LCD_enuWriteAndLatch>
	// 1110 1000
	// 0x

}
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <Keypad_enuInit>:
#include "../../MCAL/DIO/DIO_int.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	0f 92       	push	r0
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuerrorStates = ES_NOK;
    3076:	82 e0       	ldi	r24, 0x02	; 2
    3078:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinDirection(COL1_PORT , COL1_PIN , DIO_u8OUTPUT);
    307a:	82 e0       	ldi	r24, 0x02	; 2
    307c:	64 e0       	ldi	r22, 0x04	; 4
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(COL2_PORT , COL2_PIN , DIO_u8OUTPUT);
    3084:	82 e0       	ldi	r24, 0x02	; 2
    3086:	65 e0       	ldi	r22, 0x05	; 5
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(COL3_PORT , COL3_PIN , DIO_u8OUTPUT);
    308e:	82 e0       	ldi	r24, 0x02	; 2
    3090:	66 e0       	ldi	r22, 0x06	; 6
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(COL4_PORT , COL4_PIN , DIO_u8OUTPUT);
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	67 e0       	ldi	r22, 0x07	; 7
    309c:	41 e0       	ldi	r20, 0x01	; 1
    309e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(ROW1_PORT , ROW1_PIN , DIO_u8INPUT);
    30a2:	82 e0       	ldi	r24, 0x02	; 2
    30a4:	60 e0       	ldi	r22, 0x00	; 0
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(ROW2_PORT , ROW2_PIN , DIO_u8INPUT);
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	61 e0       	ldi	r22, 0x01	; 1
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(ROW3_PORT , ROW3_PIN , DIO_u8INPUT);
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	62 e0       	ldi	r22, 0x02	; 2
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(ROW4_PORT , ROW4_PIN , DIO_u8INPUT);
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	63 e0       	ldi	r22, 0x03	; 3
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(COL1_PORT , COL1_PIN , DIO_u8HIGH);
    30ca:	82 e0       	ldi	r24, 0x02	; 2
    30cc:	64 e0       	ldi	r22, 0x04	; 4
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(COL2_PORT , COL2_PIN , DIO_u8HIGH);
    30d4:	82 e0       	ldi	r24, 0x02	; 2
    30d6:	65 e0       	ldi	r22, 0x05	; 5
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(COL3_PORT , COL3_PIN , DIO_u8HIGH);
    30de:	82 e0       	ldi	r24, 0x02	; 2
    30e0:	66 e0       	ldi	r22, 0x06	; 6
    30e2:	41 e0       	ldi	r20, 0x01	; 1
    30e4:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(COL4_PORT , COL4_PIN , DIO_u8HIGH);
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	67 e0       	ldi	r22, 0x07	; 7
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(ROW1_PORT , ROW1_PIN , DIO_u8PULL_UP);
    30f2:	82 e0       	ldi	r24, 0x02	; 2
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	41 e0       	ldi	r20, 0x01	; 1
    30f8:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(ROW2_PORT , ROW2_PIN , DIO_u8PULL_UP);
    30fc:	82 e0       	ldi	r24, 0x02	; 2
    30fe:	61 e0       	ldi	r22, 0x01	; 1
    3100:	41 e0       	ldi	r20, 0x01	; 1
    3102:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(ROW3_PORT , ROW3_PIN , DIO_u8PULL_UP);
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	62 e0       	ldi	r22, 0x02	; 2
    310a:	41 e0       	ldi	r20, 0x01	; 1
    310c:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(ROW4_PORT , ROW4_PIN , DIO_u8PULL_UP);
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	63 e0       	ldi	r22, 0x03	; 3
    3114:	41 e0       	ldi	r20, 0x01	; 1
    3116:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>

	return Local_enuerrorStates;
    311a:	89 81       	ldd	r24, Y+1	; 0x01
}
    311c:	0f 90       	pop	r0
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	ea 97       	sbiw	r28, 0x3a	; 58
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	9c ab       	std	Y+52, r25	; 0x34
    313a:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuerrorStates = ES_NOK;
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	89 8b       	std	Y+17, r24	; 0x11

	u8 Local_Au8ColPorts [COL_NUM] = {COL1_PORT,COL2_PORT,COL3_PORT,COL4_PORT};
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	8a 8b       	std	Y+18, r24	; 0x12
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	8b 8b       	std	Y+19, r24	; 0x13
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	8c 8b       	std	Y+20, r24	; 0x14
    314c:	82 e0       	ldi	r24, 0x02	; 2
    314e:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_Au8ColPins  [COL_NUM] = {COL1_PIN, COL2_PIN, COL3_PIN, COL4_PIN};
    3150:	84 e0       	ldi	r24, 0x04	; 4
    3152:	8e 8b       	std	Y+22, r24	; 0x16
    3154:	85 e0       	ldi	r24, 0x05	; 5
    3156:	8f 8b       	std	Y+23, r24	; 0x17
    3158:	86 e0       	ldi	r24, 0x06	; 6
    315a:	88 8f       	std	Y+24, r24	; 0x18
    315c:	87 e0       	ldi	r24, 0x07	; 7
    315e:	89 8f       	std	Y+25, r24	; 0x19

	u8 Local_Au8RowPorts [ROW_NUM] = {ROW1_PORT,ROW2_PORT,ROW3_PORT,ROW4_PORT};
    3160:	82 e0       	ldi	r24, 0x02	; 2
    3162:	8a 8f       	std	Y+26, r24	; 0x1a
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	8b 8f       	std	Y+27, r24	; 0x1b
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	8c 8f       	std	Y+28, r24	; 0x1c
    316c:	82 e0       	ldi	r24, 0x02	; 2
    316e:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 Local_Au8RowPins  [ROW_NUM] = {ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN};
    3170:	1e 8e       	std	Y+30, r1	; 0x1e
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	8f 8f       	std	Y+31, r24	; 0x1f
    3176:	82 e0       	ldi	r24, 0x02	; 2
    3178:	88 a3       	std	Y+32, r24	; 0x20
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	89 a3       	std	Y+33, r24	; 0x21

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    317e:	eb a9       	ldd	r30, Y+51	; 0x33
    3180:	fc a9       	ldd	r31, Y+52	; 0x34
    3182:	8f ef       	ldi	r24, 0xFF	; 255
    3184:	80 83       	st	Z, r24
    3186:	44 c1       	rjmp	.+648    	; 0x3410 <Keypad_enuGetPressedKey+0x2ec>
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    3188:	18 8a       	std	Y+16, r1	; 0x10
    318a:	3e c1       	rjmp	.+636    	; 0x3408 <Keypad_enuGetPressedKey+0x2e4>
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    318c:	88 89       	ldd	r24, Y+16	; 0x10
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	ce 01       	movw	r24, r28
    3194:	42 96       	adiw	r24, 0x12	; 18
    3196:	fc 01       	movw	r30, r24
    3198:	e2 0f       	add	r30, r18
    319a:	f3 1f       	adc	r31, r19
    319c:	40 81       	ld	r20, Z
    319e:	88 89       	ldd	r24, Y+16	; 0x10
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	ce 01       	movw	r24, r28
    31a6:	46 96       	adiw	r24, 0x16	; 22
    31a8:	fc 01       	movw	r30, r24
    31aa:	e2 0f       	add	r30, r18
    31ac:	f3 1f       	adc	r31, r19
    31ae:	90 81       	ld	r25, Z
    31b0:	84 2f       	mov	r24, r20
    31b2:	69 2f       	mov	r22, r25
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    31ba:	1f 86       	std	Y+15, r1	; 0x0f
    31bc:	07 c1       	rjmp	.+526    	; 0x33cc <Keypad_enuGetPressedKey+0x2a8>
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    31be:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	ce 01       	movw	r24, r28
    31c6:	4a 96       	adiw	r24, 0x1a	; 26
    31c8:	fc 01       	movw	r30, r24
    31ca:	e2 0f       	add	r30, r18
    31cc:	f3 1f       	adc	r31, r19
    31ce:	40 81       	ld	r20, Z
    31d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	ce 01       	movw	r24, r28
    31d8:	4e 96       	adiw	r24, 0x1e	; 30
    31da:	fc 01       	movw	r30, r24
    31dc:	e2 0f       	add	r30, r18
    31de:	f3 1f       	adc	r31, r19
    31e0:	90 81       	ld	r25, Z
    31e2:	9e 01       	movw	r18, r28
    31e4:	2e 5d       	subi	r18, 0xDE	; 222
    31e6:	3f 4f       	sbci	r19, 0xFF	; 255
    31e8:	84 2f       	mov	r24, r20
    31ea:	69 2f       	mov	r22, r25
    31ec:	a9 01       	movw	r20, r18
    31ee:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    31f2:	8a a1       	ldd	r24, Y+34	; 0x22
    31f4:	88 23       	and	r24, r24
    31f6:	09 f0       	breq	.+2      	; 0x31fa <Keypad_enuGetPressedKey+0xd6>
    31f8:	e6 c0       	rjmp	.+460    	; 0x33c6 <Keypad_enuGetPressedKey+0x2a2>
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	a0 e2       	ldi	r26, 0x20	; 32
    3200:	b1 e4       	ldi	r27, 0x41	; 65
    3202:	8b 87       	std	Y+11, r24	; 0x0b
    3204:	9c 87       	std	Y+12, r25	; 0x0c
    3206:	ad 87       	std	Y+13, r26	; 0x0d
    3208:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320a:	6b 85       	ldd	r22, Y+11	; 0x0b
    320c:	7c 85       	ldd	r23, Y+12	; 0x0c
    320e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3210:	9e 85       	ldd	r25, Y+14	; 0x0e
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	4a e7       	ldi	r20, 0x7A	; 122
    3218:	55 e4       	ldi	r21, 0x45	; 69
    321a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	8f 83       	std	Y+7, r24	; 0x07
    3224:	98 87       	std	Y+8, r25	; 0x08
    3226:	a9 87       	std	Y+9, r26	; 0x09
    3228:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    322a:	6f 81       	ldd	r22, Y+7	; 0x07
    322c:	78 85       	ldd	r23, Y+8	; 0x08
    322e:	89 85       	ldd	r24, Y+9	; 0x09
    3230:	9a 85       	ldd	r25, Y+10	; 0x0a
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e8       	ldi	r20, 0x80	; 128
    3238:	5f e3       	ldi	r21, 0x3F	; 63
    323a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    323e:	88 23       	and	r24, r24
    3240:	2c f4       	brge	.+10     	; 0x324c <Keypad_enuGetPressedKey+0x128>
		__ticks = 1;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	9e 83       	std	Y+6, r25	; 0x06
    3248:	8d 83       	std	Y+5, r24	; 0x05
    324a:	3f c0       	rjmp	.+126    	; 0x32ca <Keypad_enuGetPressedKey+0x1a6>
	else if (__tmp > 65535)
    324c:	6f 81       	ldd	r22, Y+7	; 0x07
    324e:	78 85       	ldd	r23, Y+8	; 0x08
    3250:	89 85       	ldd	r24, Y+9	; 0x09
    3252:	9a 85       	ldd	r25, Y+10	; 0x0a
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	3f ef       	ldi	r19, 0xFF	; 255
    3258:	4f e7       	ldi	r20, 0x7F	; 127
    325a:	57 e4       	ldi	r21, 0x47	; 71
    325c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3260:	18 16       	cp	r1, r24
    3262:	4c f5       	brge	.+82     	; 0x32b6 <Keypad_enuGetPressedKey+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3264:	6b 85       	ldd	r22, Y+11	; 0x0b
    3266:	7c 85       	ldd	r23, Y+12	; 0x0c
    3268:	8d 85       	ldd	r24, Y+13	; 0x0d
    326a:	9e 85       	ldd	r25, Y+14	; 0x0e
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	40 e2       	ldi	r20, 0x20	; 32
    3272:	51 e4       	ldi	r21, 0x41	; 65
    3274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	bc 01       	movw	r22, r24
    327e:	cd 01       	movw	r24, r26
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9e 83       	std	Y+6, r25	; 0x06
    328a:	8d 83       	std	Y+5, r24	; 0x05
    328c:	0f c0       	rjmp	.+30     	; 0x32ac <Keypad_enuGetPressedKey+0x188>
    328e:	80 e9       	ldi	r24, 0x90	; 144
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	9c 83       	std	Y+4, r25	; 0x04
    3294:	8b 83       	std	Y+3, r24	; 0x03
    3296:	8b 81       	ldd	r24, Y+3	; 0x03
    3298:	9c 81       	ldd	r25, Y+4	; 0x04
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	f1 f7       	brne	.-4      	; 0x329a <Keypad_enuGetPressedKey+0x176>
    329e:	9c 83       	std	Y+4, r25	; 0x04
    32a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	9e 81       	ldd	r25, Y+6	; 0x06
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	9e 81       	ldd	r25, Y+6	; 0x06
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	69 f7       	brne	.-38     	; 0x328e <Keypad_enuGetPressedKey+0x16a>
    32b4:	14 c0       	rjmp	.+40     	; 0x32de <Keypad_enuGetPressedKey+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b6:	6f 81       	ldd	r22, Y+7	; 0x07
    32b8:	78 85       	ldd	r23, Y+8	; 0x08
    32ba:	89 85       	ldd	r24, Y+9	; 0x09
    32bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	9e 83       	std	Y+6, r25	; 0x06
    32c8:	8d 83       	std	Y+5, r24	; 0x05
    32ca:	8d 81       	ldd	r24, Y+5	; 0x05
    32cc:	9e 81       	ldd	r25, Y+6	; 0x06
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	9a 81       	ldd	r25, Y+2	; 0x02
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <Keypad_enuGetPressedKey+0x1b2>
    32da:	9a 83       	std	Y+2, r25	; 0x02
    32dc:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    32de:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	ce 01       	movw	r24, r28
    32e6:	4a 96       	adiw	r24, 0x1a	; 26
    32e8:	fc 01       	movw	r30, r24
    32ea:	e2 0f       	add	r30, r18
    32ec:	f3 1f       	adc	r31, r19
    32ee:	40 81       	ld	r20, Z
    32f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	ce 01       	movw	r24, r28
    32f8:	4e 96       	adiw	r24, 0x1e	; 30
    32fa:	fc 01       	movw	r30, r24
    32fc:	e2 0f       	add	r30, r18
    32fe:	f3 1f       	adc	r31, r19
    3300:	90 81       	ld	r25, Z
    3302:	9e 01       	movw	r18, r28
    3304:	2e 5d       	subi	r18, 0xDE	; 222
    3306:	3f 4f       	sbci	r19, 0xFF	; 255
    3308:	84 2f       	mov	r24, r20
    330a:	69 2f       	mov	r22, r25
    330c:	a9 01       	movw	r20, r18
    330e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    3312:	8a a1       	ldd	r24, Y+34	; 0x22
    3314:	88 23       	and	r24, r24
    3316:	09 f0       	breq	.+2      	; 0x331a <Keypad_enuGetPressedKey+0x1f6>
    3318:	56 c0       	rjmp	.+172    	; 0x33c6 <Keypad_enuGetPressedKey+0x2a2>
    331a:	1a c0       	rjmp	.+52     	; 0x3350 <Keypad_enuGetPressedKey+0x22c>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    331c:	8f 85       	ldd	r24, Y+15	; 0x0f
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	ce 01       	movw	r24, r28
    3324:	4a 96       	adiw	r24, 0x1a	; 26
    3326:	fc 01       	movw	r30, r24
    3328:	e2 0f       	add	r30, r18
    332a:	f3 1f       	adc	r31, r19
    332c:	40 81       	ld	r20, Z
    332e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3330:	28 2f       	mov	r18, r24
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	ce 01       	movw	r24, r28
    3336:	4e 96       	adiw	r24, 0x1e	; 30
    3338:	fc 01       	movw	r30, r24
    333a:	e2 0f       	add	r30, r18
    333c:	f3 1f       	adc	r31, r19
    333e:	90 81       	ld	r25, Z
    3340:	9e 01       	movw	r18, r28
    3342:	2e 5d       	subi	r18, 0xDE	; 222
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	84 2f       	mov	r24, r20
    3348:	69 2f       	mov	r22, r25
    334a:	a9 01       	movw	r20, r18
    334c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
    3350:	8a a1       	ldd	r24, Y+34	; 0x22
    3352:	88 23       	and	r24, r24
    3354:	19 f3       	breq	.-58     	; 0x331c <Keypad_enuGetPressedKey+0x1f8>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_CONFIG_VALUES;
    3356:	ce 01       	movw	r24, r28
    3358:	83 96       	adiw	r24, 0x23	; 35
    335a:	9f ab       	std	Y+55, r25	; 0x37
    335c:	8e ab       	std	Y+54, r24	; 0x36
    335e:	e3 ef       	ldi	r30, 0xF3	; 243
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	f9 af       	std	Y+57, r31	; 0x39
    3364:	e8 af       	std	Y+56, r30	; 0x38
    3366:	f0 e1       	ldi	r31, 0x10	; 16
    3368:	fa af       	std	Y+58, r31	; 0x3a
    336a:	e8 ad       	ldd	r30, Y+56	; 0x38
    336c:	f9 ad       	ldd	r31, Y+57	; 0x39
    336e:	00 80       	ld	r0, Z
    3370:	88 ad       	ldd	r24, Y+56	; 0x38
    3372:	99 ad       	ldd	r25, Y+57	; 0x39
    3374:	01 96       	adiw	r24, 0x01	; 1
    3376:	99 af       	std	Y+57, r25	; 0x39
    3378:	88 af       	std	Y+56, r24	; 0x38
    337a:	ee a9       	ldd	r30, Y+54	; 0x36
    337c:	ff a9       	ldd	r31, Y+55	; 0x37
    337e:	00 82       	st	Z, r0
    3380:	8e a9       	ldd	r24, Y+54	; 0x36
    3382:	9f a9       	ldd	r25, Y+55	; 0x37
    3384:	01 96       	adiw	r24, 0x01	; 1
    3386:	9f ab       	std	Y+55, r25	; 0x37
    3388:	8e ab       	std	Y+54, r24	; 0x36
    338a:	9a ad       	ldd	r25, Y+58	; 0x3a
    338c:	91 50       	subi	r25, 0x01	; 1
    338e:	9a af       	std	Y+58, r25	; 0x3a
    3390:	ea ad       	ldd	r30, Y+58	; 0x3a
    3392:	ee 23       	and	r30, r30
    3394:	51 f7       	brne	.-44     	; 0x336a <Keypad_enuGetPressedKey+0x246>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    3396:	8f 85       	ldd	r24, Y+15	; 0x0f
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	88 89       	ldd	r24, Y+16	; 0x10
    339e:	48 2f       	mov	r20, r24
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	22 0f       	add	r18, r18
    33a4:	33 1f       	adc	r19, r19
    33a6:	22 0f       	add	r18, r18
    33a8:	33 1f       	adc	r19, r19
    33aa:	ce 01       	movw	r24, r28
    33ac:	01 96       	adiw	r24, 0x01	; 1
    33ae:	82 0f       	add	r24, r18
    33b0:	93 1f       	adc	r25, r19
    33b2:	84 0f       	add	r24, r20
    33b4:	95 1f       	adc	r25, r21
    33b6:	fc 01       	movw	r30, r24
    33b8:	b2 96       	adiw	r30, 0x22	; 34
    33ba:	80 81       	ld	r24, Z
    33bc:	eb a9       	ldd	r30, Y+51	; 0x33
    33be:	fc a9       	ldd	r31, Y+52	; 0x34
    33c0:	80 83       	st	Z, r24
					return ES_OK;
    33c2:	1d aa       	std	Y+53, r1	; 0x35
    33c4:	2d c0       	rjmp	.+90     	; 0x3420 <Keypad_enuGetPressedKey+0x2fc>
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    33c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c8:	8f 5f       	subi	r24, 0xFF	; 255
    33ca:	8f 87       	std	Y+15, r24	; 0x0f
    33cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ce:	84 30       	cpi	r24, 0x04	; 4
    33d0:	08 f4       	brcc	.+2      	; 0x33d4 <Keypad_enuGetPressedKey+0x2b0>
    33d2:	f5 ce       	rjmp	.-534    	; 0x31be <Keypad_enuGetPressedKey+0x9a>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    33d4:	88 89       	ldd	r24, Y+16	; 0x10
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	ce 01       	movw	r24, r28
    33dc:	42 96       	adiw	r24, 0x12	; 18
    33de:	fc 01       	movw	r30, r24
    33e0:	e2 0f       	add	r30, r18
    33e2:	f3 1f       	adc	r31, r19
    33e4:	40 81       	ld	r20, Z
    33e6:	88 89       	ldd	r24, Y+16	; 0x10
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	ce 01       	movw	r24, r28
    33ee:	46 96       	adiw	r24, 0x16	; 22
    33f0:	fc 01       	movw	r30, r24
    33f2:	e2 0f       	add	r30, r18
    33f4:	f3 1f       	adc	r31, r19
    33f6:	90 81       	ld	r25, Z
    33f8:	84 2f       	mov	r24, r20
    33fa:	69 2f       	mov	r22, r25
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    3402:	88 89       	ldd	r24, Y+16	; 0x10
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	88 8b       	std	Y+16, r24	; 0x10
    3408:	88 89       	ldd	r24, Y+16	; 0x10
    340a:	84 30       	cpi	r24, 0x04	; 4
    340c:	08 f4       	brcc	.+2      	; 0x3410 <Keypad_enuGetPressedKey+0x2ec>
    340e:	be ce       	rjmp	.-644    	; 0x318c <Keypad_enuGetPressedKey+0x68>
	u8 Local_Au8RowPorts [ROW_NUM] = {ROW1_PORT,ROW2_PORT,ROW3_PORT,ROW4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
    3410:	eb a9       	ldd	r30, Y+51	; 0x33
    3412:	fc a9       	ldd	r31, Y+52	; 0x34
    3414:	80 81       	ld	r24, Z
    3416:	8f 3f       	cpi	r24, 0xFF	; 255
    3418:	09 f4       	brne	.+2      	; 0x341c <Keypad_enuGetPressedKey+0x2f8>
    341a:	b6 ce       	rjmp	.-660    	; 0x3188 <Keypad_enuGetPressedKey+0x64>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuerrorStates;
    341c:	f9 89       	ldd	r31, Y+17	; 0x11
    341e:	fd ab       	std	Y+53, r31	; 0x35
    3420:	8d a9       	ldd	r24, Y+53	; 0x35
}
    3422:	ea 96       	adiw	r28, 0x3a	; 58
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <main>:
char password[5];
u8 activeTimer = 0;
u8 counter = 0;
u8 entranceFlag =1;
int main()
{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_enuInit();
    343c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <TIMER0_enuInit>
	LCD_enuInit();
    3440:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_enuInit>
	Keypad_enuInit();
    3444:	0e 94 36 18 	call	0x306c	; 0x306c <Keypad_enuInit>
	EXTI_enuInit(EXTI_enuAstrEXTI_CONFIG);
    3448:	8c ee       	ldi	r24, 0xEC	; 236
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	0e 94 f6 06 	call	0xdec	; 0xdec <EXTI_enuInit>

	__asm("sei");// enable global interrupt
    3450:	78 94       	sei

	EXTI_enuCallBack((volatile void (*) (void))APP_enuActivation , 0);
    3452:	8f e2       	ldi	r24, 0x2F	; 47
    3454:	9a e1       	ldi	r25, 0x1A	; 26
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	0e 94 9a 09 	call	0x1334	; 0x1334 <EXTI_enuCallBack>
    345c:	ff cf       	rjmp	.-2      	; 0x345c <main+0x28>

0000345e <APP_enuActivation>:
	}

return 0;
}

volatile void APP_enuActivation(void){
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	df 93       	push	r29
    3464:	cf 93       	push	r28
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	c4 55       	subi	r28, 0x54	; 84
    346c:	d0 40       	sbci	r29, 0x00	; 0
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61

				DIO_enuSetPinDirection(MOTOR_PORT,MOTOR_PIN,DIO_u8OUTPUT);
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	62 e0       	ldi	r22, 0x02	; 2
    347c:	41 e0       	ldi	r20, 0x01	; 1
    347e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_enuSetPinDirection>
		if(entranceFlag){
    3482:	80 91 f2 00 	lds	r24, 0x00F2
    3486:	88 23       	and	r24, r24
    3488:	09 f4       	brne	.+2      	; 0x348c <APP_enuActivation+0x2e>
    348a:	73 c3       	rjmp	.+1766   	; 0x3b72 <APP_enuActivation+0x714>
			entranceFlag=0;
    348c:	10 92 f2 00 	sts	0x00F2, r1
				LCD_enuClearDisplay();
    3490:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_enuClearDisplay>
				LCD_enuJumpCursorTo(1,0);
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
				LCD_enuSendString("Welcome to Garage");
    349c:	80 e6       	ldi	r24, 0x60	; 96
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>
    34a4:	fe 01       	movw	r30, r28
    34a6:	ef 5a       	subi	r30, 0xAF	; 175
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	aa e7       	ldi	r26, 0x7A	; 122
    34b0:	b4 e4       	ldi	r27, 0x44	; 68
    34b2:	80 83       	st	Z, r24
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	a2 83       	std	Z+2, r26	; 0x02
    34b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	8e 01       	movw	r16, r28
    34bc:	03 5b       	subi	r16, 0xB3	; 179
    34be:	1f 4f       	sbci	r17, 0xFF	; 255
    34c0:	fe 01       	movw	r30, r28
    34c2:	ef 5a       	subi	r30, 0xAF	; 175
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	60 81       	ld	r22, Z
    34c8:	71 81       	ldd	r23, Z+1	; 0x01
    34ca:	82 81       	ldd	r24, Z+2	; 0x02
    34cc:	93 81       	ldd	r25, Z+3	; 0x03
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	4a e7       	ldi	r20, 0x7A	; 122
    34d4:	55 e4       	ldi	r21, 0x45	; 69
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	f8 01       	movw	r30, r16
    34e0:	80 83       	st	Z, r24
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	a2 83       	std	Z+2, r26	; 0x02
    34e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e8:	fe 01       	movw	r30, r28
    34ea:	e3 5b       	subi	r30, 0xB3	; 179
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	44 f4       	brge	.+16     	; 0x3516 <APP_enuActivation+0xb8>
		__ticks = 1;
    3506:	fe 01       	movw	r30, r28
    3508:	e5 5b       	subi	r30, 0xB5	; 181
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	80 83       	st	Z, r24
    3514:	64 c0       	rjmp	.+200    	; 0x35de <APP_enuActivation+0x180>
	else if (__tmp > 65535)
    3516:	fe 01       	movw	r30, r28
    3518:	e3 5b       	subi	r30, 0xB3	; 179
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	60 81       	ld	r22, Z
    351e:	71 81       	ldd	r23, Z+1	; 0x01
    3520:	82 81       	ldd	r24, Z+2	; 0x02
    3522:	93 81       	ldd	r25, Z+3	; 0x03
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	3f ef       	ldi	r19, 0xFF	; 255
    3528:	4f e7       	ldi	r20, 0x7F	; 127
    352a:	57 e4       	ldi	r21, 0x47	; 71
    352c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3530:	18 16       	cp	r1, r24
    3532:	0c f0       	brlt	.+2      	; 0x3536 <APP_enuActivation+0xd8>
    3534:	43 c0       	rjmp	.+134    	; 0x35bc <APP_enuActivation+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	fe 01       	movw	r30, r28
    3538:	ef 5a       	subi	r30, 0xAF	; 175
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	60 81       	ld	r22, Z
    353e:	71 81       	ldd	r23, Z+1	; 0x01
    3540:	82 81       	ldd	r24, Z+2	; 0x02
    3542:	93 81       	ldd	r25, Z+3	; 0x03
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e2       	ldi	r20, 0x20	; 32
    354a:	51 e4       	ldi	r21, 0x41	; 65
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	8e 01       	movw	r16, r28
    3556:	05 5b       	subi	r16, 0xB5	; 181
    3558:	1f 4f       	sbci	r17, 0xFF	; 255
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	f8 01       	movw	r30, r16
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	80 83       	st	Z, r24
    356c:	1f c0       	rjmp	.+62     	; 0x35ac <APP_enuActivation+0x14e>
    356e:	fe 01       	movw	r30, r28
    3570:	e7 5b       	subi	r30, 0xB7	; 183
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	80 e9       	ldi	r24, 0x90	; 144
    3576:	91 e0       	ldi	r25, 0x01	; 1
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
    357c:	fe 01       	movw	r30, r28
    357e:	e7 5b       	subi	r30, 0xB7	; 183
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	91 81       	ldd	r25, Z+1	; 0x01
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <APP_enuActivation+0x128>
    358a:	fe 01       	movw	r30, r28
    358c:	e7 5b       	subi	r30, 0xB7	; 183
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	de 01       	movw	r26, r28
    3596:	a5 5b       	subi	r26, 0xB5	; 181
    3598:	bf 4f       	sbci	r27, 0xFF	; 255
    359a:	fe 01       	movw	r30, r28
    359c:	e5 5b       	subi	r30, 0xB5	; 181
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	80 81       	ld	r24, Z
    35a2:	91 81       	ldd	r25, Z+1	; 0x01
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	11 96       	adiw	r26, 0x01	; 1
    35a8:	9c 93       	st	X, r25
    35aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ac:	fe 01       	movw	r30, r28
    35ae:	e5 5b       	subi	r30, 0xB5	; 181
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	d1 f6       	brne	.-76     	; 0x356e <APP_enuActivation+0x110>
    35ba:	27 c0       	rjmp	.+78     	; 0x360a <APP_enuActivation+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35bc:	8e 01       	movw	r16, r28
    35be:	05 5b       	subi	r16, 0xB5	; 181
    35c0:	1f 4f       	sbci	r17, 0xFF	; 255
    35c2:	fe 01       	movw	r30, r28
    35c4:	e3 5b       	subi	r30, 0xB3	; 179
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	f8 01       	movw	r30, r16
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
    35de:	de 01       	movw	r26, r28
    35e0:	a9 5b       	subi	r26, 0xB9	; 185
    35e2:	bf 4f       	sbci	r27, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e5 5b       	subi	r30, 0xB5	; 181
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	8d 93       	st	X+, r24
    35f0:	9c 93       	st	X, r25
    35f2:	fe 01       	movw	r30, r28
    35f4:	e9 5b       	subi	r30, 0xB9	; 185
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <APP_enuActivation+0x19e>
    3600:	fe 01       	movw	r30, r28
    3602:	e9 5b       	subi	r30, 0xB9	; 185
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	80 83       	st	Z, r24
				_delay_ms(1000);
				Enter:
				LCD_enuClearDisplay();
    360a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_enuClearDisplay>
				LCD_enuJumpCursorTo(1,0);
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
			 	LCD_enuSendString("Enter Password    ");
    3616:	82 e7       	ldi	r24, 0x72	; 114
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>

				LoginSystem_enuGetDataFromUserByKeypad(&password);
    361e:	8f e0       	ldi	r24, 0x0F	; 15
    3620:	91 e0       	ldi	r25, 0x01	; 1
    3622:	0e 94 a3 05 	call	0xb46	; 0xb46 <LoginSystem_enuGetDataFromUserByKeypad>

				pass = LoginSystem_u8Strcmp(&password,"1234");
    3626:	8f e0       	ldi	r24, 0x0F	; 15
    3628:	91 e0       	ldi	r25, 0x01	; 1
    362a:	25 e8       	ldi	r18, 0x85	; 133
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	b9 01       	movw	r22, r18
    3630:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LoginSystem_u8Strcmp>
    3634:	80 93 0c 01 	sts	0x010C, r24
				if( pass && counter<3 ){
    3638:	80 91 0c 01 	lds	r24, 0x010C
    363c:	88 23       	and	r24, r24
    363e:	09 f4       	brne	.+2      	; 0x3642 <APP_enuActivation+0x1e4>
    3640:	a3 c0       	rjmp	.+326    	; 0x3788 <APP_enuActivation+0x32a>
    3642:	80 91 0e 01 	lds	r24, 0x010E
    3646:	83 30       	cpi	r24, 0x03	; 3
    3648:	08 f0       	brcs	.+2      	; 0x364c <APP_enuActivation+0x1ee>
    364a:	9e c0       	rjmp	.+316    	; 0x3788 <APP_enuActivation+0x32a>
					activeTimer = 1;
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	80 93 0d 01 	sts	0x010D, r24
					LCD_enuJumpCursorTo(1,0);
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
					LCD_enuSendString("Logged in      ");
    365a:	8a e8       	ldi	r24, 0x8A	; 138
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>
					LCD_enuJumpCursorTo(2,0);
    3662:	82 e0       	ldi	r24, 0x02	; 2
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
					LCD_enuSendString("Successfully");
    366a:	8a e9       	ldi	r24, 0x9A	; 154
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>
    3672:	fe 01       	movw	r30, r28
    3674:	ed 5b       	subi	r30, 0xBD	; 189
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	aa ef       	ldi	r26, 0xFA	; 250
    367e:	b4 e4       	ldi	r27, 0x44	; 68
    3680:	80 83       	st	Z, r24
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	a2 83       	std	Z+2, r26	; 0x02
    3686:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3688:	8e 01       	movw	r16, r28
    368a:	01 5c       	subi	r16, 0xC1	; 193
    368c:	1f 4f       	sbci	r17, 0xFF	; 255
    368e:	fe 01       	movw	r30, r28
    3690:	ed 5b       	subi	r30, 0xBD	; 189
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	4a e7       	ldi	r20, 0x7A	; 122
    36a2:	55 e4       	ldi	r21, 0x45	; 69
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	f8 01       	movw	r30, r16
    36ae:	80 83       	st	Z, r24
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	a2 83       	std	Z+2, r26	; 0x02
    36b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36b6:	fe 01       	movw	r30, r28
    36b8:	ff 96       	adiw	r30, 0x3f	; 63
    36ba:	60 81       	ld	r22, Z
    36bc:	71 81       	ldd	r23, Z+1	; 0x01
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	93 81       	ldd	r25, Z+3	; 0x03
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e8       	ldi	r20, 0x80	; 128
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36ce:	88 23       	and	r24, r24
    36d0:	2c f4       	brge	.+10     	; 0x36dc <APP_enuActivation+0x27e>
		__ticks = 1;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	9e af       	std	Y+62, r25	; 0x3e
    36d8:	8d af       	std	Y+61, r24	; 0x3d
    36da:	46 c0       	rjmp	.+140    	; 0x3768 <APP_enuActivation+0x30a>
	else if (__tmp > 65535)
    36dc:	fe 01       	movw	r30, r28
    36de:	ff 96       	adiw	r30, 0x3f	; 63
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	93 81       	ldd	r25, Z+3	; 0x03
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	3f ef       	ldi	r19, 0xFF	; 255
    36ec:	4f e7       	ldi	r20, 0x7F	; 127
    36ee:	57 e4       	ldi	r21, 0x47	; 71
    36f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36f4:	18 16       	cp	r1, r24
    36f6:	64 f5       	brge	.+88     	; 0x3750 <APP_enuActivation+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f8:	fe 01       	movw	r30, r28
    36fa:	ed 5b       	subi	r30, 0xBD	; 189
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e2       	ldi	r20, 0x20	; 32
    370c:	51 e4       	ldi	r21, 0x41	; 65
    370e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	bc 01       	movw	r22, r24
    3718:	cd 01       	movw	r24, r26
    371a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9e af       	std	Y+62, r25	; 0x3e
    3724:	8d af       	std	Y+61, r24	; 0x3d
    3726:	0f c0       	rjmp	.+30     	; 0x3746 <APP_enuActivation+0x2e8>
    3728:	80 e9       	ldi	r24, 0x90	; 144
    372a:	91 e0       	ldi	r25, 0x01	; 1
    372c:	9c af       	std	Y+60, r25	; 0x3c
    372e:	8b af       	std	Y+59, r24	; 0x3b
    3730:	8b ad       	ldd	r24, Y+59	; 0x3b
    3732:	9c ad       	ldd	r25, Y+60	; 0x3c
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <APP_enuActivation+0x2d6>
    3738:	9c af       	std	Y+60, r25	; 0x3c
    373a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373c:	8d ad       	ldd	r24, Y+61	; 0x3d
    373e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	9e af       	std	Y+62, r25	; 0x3e
    3744:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3746:	8d ad       	ldd	r24, Y+61	; 0x3d
    3748:	9e ad       	ldd	r25, Y+62	; 0x3e
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	69 f7       	brne	.-38     	; 0x3728 <APP_enuActivation+0x2ca>
    374e:	16 c0       	rjmp	.+44     	; 0x377c <APP_enuActivation+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3750:	fe 01       	movw	r30, r28
    3752:	ff 96       	adiw	r30, 0x3f	; 63
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	9e af       	std	Y+62, r25	; 0x3e
    3766:	8d af       	std	Y+61, r24	; 0x3d
    3768:	8d ad       	ldd	r24, Y+61	; 0x3d
    376a:	9e ad       	ldd	r25, Y+62	; 0x3e
    376c:	9a af       	std	Y+58, r25	; 0x3a
    376e:	89 af       	std	Y+57, r24	; 0x39
    3770:	89 ad       	ldd	r24, Y+57	; 0x39
    3772:	9a ad       	ldd	r25, Y+58	; 0x3a
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	f1 f7       	brne	.-4      	; 0x3774 <APP_enuActivation+0x316>
    3778:	9a af       	std	Y+58, r25	; 0x3a
    377a:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(2000);
					LCD_enuClearDisplay();
    377c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_enuClearDisplay>

					}

					goto Enter;
				}
				entranceFlag=1;
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	80 93 f2 00 	sts	0x00F2, r24
    3786:	f5 c1       	rjmp	.+1002   	; 0x3b72 <APP_enuActivation+0x714>
					LCD_enuSendString("Successfully");
					_delay_ms(2000);
					LCD_enuClearDisplay();
				}
				else{
					counter++;
    3788:	80 91 0e 01 	lds	r24, 0x010E
    378c:	8f 5f       	subi	r24, 0xFF	; 255
    378e:	80 93 0e 01 	sts	0x010E, r24
					LCD_enuJumpCursorTo(1,0);
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
					LCD_enuSendString("Wrong Password    ");
    379a:	87 ea       	ldi	r24, 0xA7	; 167
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	aa e7       	ldi	r26, 0x7A	; 122
    37a8:	b4 e4       	ldi	r27, 0x44	; 68
    37aa:	8d ab       	std	Y+53, r24	; 0x35
    37ac:	9e ab       	std	Y+54, r25	; 0x36
    37ae:	af ab       	std	Y+55, r26	; 0x37
    37b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b2:	6d a9       	ldd	r22, Y+53	; 0x35
    37b4:	7e a9       	ldd	r23, Y+54	; 0x36
    37b6:	8f a9       	ldd	r24, Y+55	; 0x37
    37b8:	98 ad       	ldd	r25, Y+56	; 0x38
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	4a e7       	ldi	r20, 0x7A	; 122
    37c0:	55 e4       	ldi	r21, 0x45	; 69
    37c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	89 ab       	std	Y+49, r24	; 0x31
    37cc:	9a ab       	std	Y+50, r25	; 0x32
    37ce:	ab ab       	std	Y+51, r26	; 0x33
    37d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37d2:	69 a9       	ldd	r22, Y+49	; 0x31
    37d4:	7a a9       	ldd	r23, Y+50	; 0x32
    37d6:	8b a9       	ldd	r24, Y+51	; 0x33
    37d8:	9c a9       	ldd	r25, Y+52	; 0x34
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e8       	ldi	r20, 0x80	; 128
    37e0:	5f e3       	ldi	r21, 0x3F	; 63
    37e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37e6:	88 23       	and	r24, r24
    37e8:	2c f4       	brge	.+10     	; 0x37f4 <APP_enuActivation+0x396>
		__ticks = 1;
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	98 ab       	std	Y+48, r25	; 0x30
    37f0:	8f a7       	std	Y+47, r24	; 0x2f
    37f2:	3f c0       	rjmp	.+126    	; 0x3872 <APP_enuActivation+0x414>
	else if (__tmp > 65535)
    37f4:	69 a9       	ldd	r22, Y+49	; 0x31
    37f6:	7a a9       	ldd	r23, Y+50	; 0x32
    37f8:	8b a9       	ldd	r24, Y+51	; 0x33
    37fa:	9c a9       	ldd	r25, Y+52	; 0x34
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	3f ef       	ldi	r19, 0xFF	; 255
    3800:	4f e7       	ldi	r20, 0x7F	; 127
    3802:	57 e4       	ldi	r21, 0x47	; 71
    3804:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3808:	18 16       	cp	r1, r24
    380a:	4c f5       	brge	.+82     	; 0x385e <APP_enuActivation+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    380c:	6d a9       	ldd	r22, Y+53	; 0x35
    380e:	7e a9       	ldd	r23, Y+54	; 0x36
    3810:	8f a9       	ldd	r24, Y+55	; 0x37
    3812:	98 ad       	ldd	r25, Y+56	; 0x38
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	40 e2       	ldi	r20, 0x20	; 32
    381a:	51 e4       	ldi	r21, 0x41	; 65
    381c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	bc 01       	movw	r22, r24
    3826:	cd 01       	movw	r24, r26
    3828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	98 ab       	std	Y+48, r25	; 0x30
    3832:	8f a7       	std	Y+47, r24	; 0x2f
    3834:	0f c0       	rjmp	.+30     	; 0x3854 <APP_enuActivation+0x3f6>
    3836:	80 e9       	ldi	r24, 0x90	; 144
    3838:	91 e0       	ldi	r25, 0x01	; 1
    383a:	9e a7       	std	Y+46, r25	; 0x2e
    383c:	8d a7       	std	Y+45, r24	; 0x2d
    383e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3840:	9e a5       	ldd	r25, Y+46	; 0x2e
    3842:	01 97       	sbiw	r24, 0x01	; 1
    3844:	f1 f7       	brne	.-4      	; 0x3842 <APP_enuActivation+0x3e4>
    3846:	9e a7       	std	Y+46, r25	; 0x2e
    3848:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384a:	8f a5       	ldd	r24, Y+47	; 0x2f
    384c:	98 a9       	ldd	r25, Y+48	; 0x30
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	98 ab       	std	Y+48, r25	; 0x30
    3852:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3854:	8f a5       	ldd	r24, Y+47	; 0x2f
    3856:	98 a9       	ldd	r25, Y+48	; 0x30
    3858:	00 97       	sbiw	r24, 0x00	; 0
    385a:	69 f7       	brne	.-38     	; 0x3836 <APP_enuActivation+0x3d8>
    385c:	14 c0       	rjmp	.+40     	; 0x3886 <APP_enuActivation+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    385e:	69 a9       	ldd	r22, Y+49	; 0x31
    3860:	7a a9       	ldd	r23, Y+50	; 0x32
    3862:	8b a9       	ldd	r24, Y+51	; 0x33
    3864:	9c a9       	ldd	r25, Y+52	; 0x34
    3866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	98 ab       	std	Y+48, r25	; 0x30
    3870:	8f a7       	std	Y+47, r24	; 0x2f
    3872:	8f a5       	ldd	r24, Y+47	; 0x2f
    3874:	98 a9       	ldd	r25, Y+48	; 0x30
    3876:	9c a7       	std	Y+44, r25	; 0x2c
    3878:	8b a7       	std	Y+43, r24	; 0x2b
    387a:	8b a5       	ldd	r24, Y+43	; 0x2b
    387c:	9c a5       	ldd	r25, Y+44	; 0x2c
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	f1 f7       	brne	.-4      	; 0x387e <APP_enuActivation+0x420>
    3882:	9c a7       	std	Y+44, r25	; 0x2c
    3884:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					LCD_enuJumpCursorTo(1,0);
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
					LCD_enuSendString("Try Again!!       ");
    388e:	8a eb       	ldi	r24, 0xBA	; 186
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	aa e7       	ldi	r26, 0x7A	; 122
    389c:	b4 e4       	ldi	r27, 0x44	; 68
    389e:	8f a3       	std	Y+39, r24	; 0x27
    38a0:	98 a7       	std	Y+40, r25	; 0x28
    38a2:	a9 a7       	std	Y+41, r26	; 0x29
    38a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a6:	6f a1       	ldd	r22, Y+39	; 0x27
    38a8:	78 a5       	ldd	r23, Y+40	; 0x28
    38aa:	89 a5       	ldd	r24, Y+41	; 0x29
    38ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	4a e7       	ldi	r20, 0x7A	; 122
    38b4:	55 e4       	ldi	r21, 0x45	; 69
    38b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	8b a3       	std	Y+35, r24	; 0x23
    38c0:	9c a3       	std	Y+36, r25	; 0x24
    38c2:	ad a3       	std	Y+37, r26	; 0x25
    38c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38c6:	6b a1       	ldd	r22, Y+35	; 0x23
    38c8:	7c a1       	ldd	r23, Y+36	; 0x24
    38ca:	8d a1       	ldd	r24, Y+37	; 0x25
    38cc:	9e a1       	ldd	r25, Y+38	; 0x26
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e8       	ldi	r20, 0x80	; 128
    38d4:	5f e3       	ldi	r21, 0x3F	; 63
    38d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38da:	88 23       	and	r24, r24
    38dc:	2c f4       	brge	.+10     	; 0x38e8 <APP_enuActivation+0x48a>
		__ticks = 1;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	9a a3       	std	Y+34, r25	; 0x22
    38e4:	89 a3       	std	Y+33, r24	; 0x21
    38e6:	3f c0       	rjmp	.+126    	; 0x3966 <APP_enuActivation+0x508>
	else if (__tmp > 65535)
    38e8:	6b a1       	ldd	r22, Y+35	; 0x23
    38ea:	7c a1       	ldd	r23, Y+36	; 0x24
    38ec:	8d a1       	ldd	r24, Y+37	; 0x25
    38ee:	9e a1       	ldd	r25, Y+38	; 0x26
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	3f ef       	ldi	r19, 0xFF	; 255
    38f4:	4f e7       	ldi	r20, 0x7F	; 127
    38f6:	57 e4       	ldi	r21, 0x47	; 71
    38f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38fc:	18 16       	cp	r1, r24
    38fe:	4c f5       	brge	.+82     	; 0x3952 <APP_enuActivation+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3900:	6f a1       	ldd	r22, Y+39	; 0x27
    3902:	78 a5       	ldd	r23, Y+40	; 0x28
    3904:	89 a5       	ldd	r24, Y+41	; 0x29
    3906:	9a a5       	ldd	r25, Y+42	; 0x2a
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e2       	ldi	r20, 0x20	; 32
    390e:	51 e4       	ldi	r21, 0x41	; 65
    3910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9a a3       	std	Y+34, r25	; 0x22
    3926:	89 a3       	std	Y+33, r24	; 0x21
    3928:	0f c0       	rjmp	.+30     	; 0x3948 <APP_enuActivation+0x4ea>
    392a:	80 e9       	ldi	r24, 0x90	; 144
    392c:	91 e0       	ldi	r25, 0x01	; 1
    392e:	98 a3       	std	Y+32, r25	; 0x20
    3930:	8f 8f       	std	Y+31, r24	; 0x1f
    3932:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3934:	98 a1       	ldd	r25, Y+32	; 0x20
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <APP_enuActivation+0x4d8>
    393a:	98 a3       	std	Y+32, r25	; 0x20
    393c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393e:	89 a1       	ldd	r24, Y+33	; 0x21
    3940:	9a a1       	ldd	r25, Y+34	; 0x22
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	9a a3       	std	Y+34, r25	; 0x22
    3946:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3948:	89 a1       	ldd	r24, Y+33	; 0x21
    394a:	9a a1       	ldd	r25, Y+34	; 0x22
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	69 f7       	brne	.-38     	; 0x392a <APP_enuActivation+0x4cc>
    3950:	14 c0       	rjmp	.+40     	; 0x397a <APP_enuActivation+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3952:	6b a1       	ldd	r22, Y+35	; 0x23
    3954:	7c a1       	ldd	r23, Y+36	; 0x24
    3956:	8d a1       	ldd	r24, Y+37	; 0x25
    3958:	9e a1       	ldd	r25, Y+38	; 0x26
    395a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	9a a3       	std	Y+34, r25	; 0x22
    3964:	89 a3       	std	Y+33, r24	; 0x21
    3966:	89 a1       	ldd	r24, Y+33	; 0x21
    3968:	9a a1       	ldd	r25, Y+34	; 0x22
    396a:	9e 8f       	std	Y+30, r25	; 0x1e
    396c:	8d 8f       	std	Y+29, r24	; 0x1d
    396e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3970:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <APP_enuActivation+0x514>
    3976:	9e 8f       	std	Y+30, r25	; 0x1e
    3978:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					if(counter >= 1){
    397a:	80 91 0e 01 	lds	r24, 0x010E
    397e:	88 23       	and	r24, r24
    3980:	09 f4       	brne	.+2      	; 0x3984 <APP_enuActivation+0x526>
    3982:	43 ce       	rjmp	.-890    	; 0x360a <APP_enuActivation+0x1ac>
						LCD_enuJumpCursorTo(1,0);
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
						LCD_enuSendString("You are Blocked");
    398c:	8d ec       	ldi	r24, 0xCD	; 205
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	aa ef       	ldi	r26, 0xFA	; 250
    399a:	b3 e4       	ldi	r27, 0x43	; 67
    399c:	89 8f       	std	Y+25, r24	; 0x19
    399e:	9a 8f       	std	Y+26, r25	; 0x1a
    39a0:	ab 8f       	std	Y+27, r26	; 0x1b
    39a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a4:	69 8d       	ldd	r22, Y+25	; 0x19
    39a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	4a e7       	ldi	r20, 0x7A	; 122
    39b2:	55 e4       	ldi	r21, 0x45	; 69
    39b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	8d 8b       	std	Y+21, r24	; 0x15
    39be:	9e 8b       	std	Y+22, r25	; 0x16
    39c0:	af 8b       	std	Y+23, r26	; 0x17
    39c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39c4:	6d 89       	ldd	r22, Y+21	; 0x15
    39c6:	7e 89       	ldd	r23, Y+22	; 0x16
    39c8:	8f 89       	ldd	r24, Y+23	; 0x17
    39ca:	98 8d       	ldd	r25, Y+24	; 0x18
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e8       	ldi	r20, 0x80	; 128
    39d2:	5f e3       	ldi	r21, 0x3F	; 63
    39d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39d8:	88 23       	and	r24, r24
    39da:	2c f4       	brge	.+10     	; 0x39e6 <APP_enuActivation+0x588>
		__ticks = 1;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	9c 8b       	std	Y+20, r25	; 0x14
    39e2:	8b 8b       	std	Y+19, r24	; 0x13
    39e4:	3f c0       	rjmp	.+126    	; 0x3a64 <APP_enuActivation+0x606>
	else if (__tmp > 65535)
    39e6:	6d 89       	ldd	r22, Y+21	; 0x15
    39e8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ea:	8f 89       	ldd	r24, Y+23	; 0x17
    39ec:	98 8d       	ldd	r25, Y+24	; 0x18
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	3f ef       	ldi	r19, 0xFF	; 255
    39f2:	4f e7       	ldi	r20, 0x7F	; 127
    39f4:	57 e4       	ldi	r21, 0x47	; 71
    39f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39fa:	18 16       	cp	r1, r24
    39fc:	4c f5       	brge	.+82     	; 0x3a50 <APP_enuActivation+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e2       	ldi	r20, 0x20	; 32
    3a0c:	51 e4       	ldi	r21, 0x41	; 65
    3a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	9c 8b       	std	Y+20, r25	; 0x14
    3a24:	8b 8b       	std	Y+19, r24	; 0x13
    3a26:	0f c0       	rjmp	.+30     	; 0x3a46 <APP_enuActivation+0x5e8>
    3a28:	80 e9       	ldi	r24, 0x90	; 144
    3a2a:	91 e0       	ldi	r25, 0x01	; 1
    3a2c:	9a 8b       	std	Y+18, r25	; 0x12
    3a2e:	89 8b       	std	Y+17, r24	; 0x11
    3a30:	89 89       	ldd	r24, Y+17	; 0x11
    3a32:	9a 89       	ldd	r25, Y+18	; 0x12
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	f1 f7       	brne	.-4      	; 0x3a34 <APP_enuActivation+0x5d6>
    3a38:	9a 8b       	std	Y+18, r25	; 0x12
    3a3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	9c 8b       	std	Y+20, r25	; 0x14
    3a44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a46:	8b 89       	ldd	r24, Y+19	; 0x13
    3a48:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	69 f7       	brne	.-38     	; 0x3a28 <APP_enuActivation+0x5ca>
    3a4e:	14 c0       	rjmp	.+40     	; 0x3a78 <APP_enuActivation+0x61a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a50:	6d 89       	ldd	r22, Y+21	; 0x15
    3a52:	7e 89       	ldd	r23, Y+22	; 0x16
    3a54:	8f 89       	ldd	r24, Y+23	; 0x17
    3a56:	98 8d       	ldd	r25, Y+24	; 0x18
    3a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	9c 8b       	std	Y+20, r25	; 0x14
    3a62:	8b 8b       	std	Y+19, r24	; 0x13
    3a64:	8b 89       	ldd	r24, Y+19	; 0x13
    3a66:	9c 89       	ldd	r25, Y+20	; 0x14
    3a68:	98 8b       	std	Y+16, r25	; 0x10
    3a6a:	8f 87       	std	Y+15, r24	; 0x0f
    3a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a6e:	98 89       	ldd	r25, Y+16	; 0x10
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <APP_enuActivation+0x612>
    3a74:	98 8b       	std	Y+16, r25	; 0x10
    3a76:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						LCD_enuJumpCursorTo(2,0);
    3a78:	82 e0       	ldi	r24, 0x02	; 2
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_enuJumpCursorTo>
						LCD_enuSendString("for 6s");
    3a80:	8d ed       	ldi	r24, 0xDD	; 221
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_enuSendString>
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	90 e8       	ldi	r25, 0x80	; 128
    3a8c:	ab eb       	ldi	r26, 0xBB	; 187
    3a8e:	b5 e4       	ldi	r27, 0x45	; 69
    3a90:	8b 87       	std	Y+11, r24	; 0x0b
    3a92:	9c 87       	std	Y+12, r25	; 0x0c
    3a94:	ad 87       	std	Y+13, r26	; 0x0d
    3a96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	4a e7       	ldi	r20, 0x7A	; 122
    3aa6:	55 e4       	ldi	r21, 0x45	; 69
    3aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	8f 83       	std	Y+7, r24	; 0x07
    3ab2:	98 87       	std	Y+8, r25	; 0x08
    3ab4:	a9 87       	std	Y+9, r26	; 0x09
    3ab6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aba:	78 85       	ldd	r23, Y+8	; 0x08
    3abc:	89 85       	ldd	r24, Y+9	; 0x09
    3abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	40 e8       	ldi	r20, 0x80	; 128
    3ac6:	5f e3       	ldi	r21, 0x3F	; 63
    3ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3acc:	88 23       	and	r24, r24
    3ace:	2c f4       	brge	.+10     	; 0x3ada <APP_enuActivation+0x67c>
		__ticks = 1;
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
    3ad8:	3f c0       	rjmp	.+126    	; 0x3b58 <APP_enuActivation+0x6fa>
	else if (__tmp > 65535)
    3ada:	6f 81       	ldd	r22, Y+7	; 0x07
    3adc:	78 85       	ldd	r23, Y+8	; 0x08
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	3f ef       	ldi	r19, 0xFF	; 255
    3ae6:	4f e7       	ldi	r20, 0x7F	; 127
    3ae8:	57 e4       	ldi	r21, 0x47	; 71
    3aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aee:	18 16       	cp	r1, r24
    3af0:	4c f5       	brge	.+82     	; 0x3b44 <APP_enuActivation+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e2       	ldi	r20, 0x20	; 32
    3b00:	51 e4       	ldi	r21, 0x41	; 65
    3b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	bc 01       	movw	r22, r24
    3b0c:	cd 01       	movw	r24, r26
    3b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	0f c0       	rjmp	.+30     	; 0x3b3a <APP_enuActivation+0x6dc>
    3b1c:	80 e9       	ldi	r24, 0x90	; 144
    3b1e:	91 e0       	ldi	r25, 0x01	; 1
    3b20:	9c 83       	std	Y+4, r25	; 0x04
    3b22:	8b 83       	std	Y+3, r24	; 0x03
    3b24:	8b 81       	ldd	r24, Y+3	; 0x03
    3b26:	9c 81       	ldd	r25, Y+4	; 0x04
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	f1 f7       	brne	.-4      	; 0x3b28 <APP_enuActivation+0x6ca>
    3b2c:	9c 83       	std	Y+4, r25	; 0x04
    3b2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b30:	8d 81       	ldd	r24, Y+5	; 0x05
    3b32:	9e 81       	ldd	r25, Y+6	; 0x06
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	9e 83       	std	Y+6, r25	; 0x06
    3b38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	69 f7       	brne	.-38     	; 0x3b1c <APP_enuActivation+0x6be>
    3b42:	14 c0       	rjmp	.+40     	; 0x3b6c <APP_enuActivation+0x70e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b44:	6f 81       	ldd	r22, Y+7	; 0x07
    3b46:	78 85       	ldd	r23, Y+8	; 0x08
    3b48:	89 85       	ldd	r24, Y+9	; 0x09
    3b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	9e 83       	std	Y+6, r25	; 0x06
    3b56:	8d 83       	std	Y+5, r24	; 0x05
    3b58:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5c:	9a 83       	std	Y+2, r25	; 0x02
    3b5e:	89 83       	std	Y+1, r24	; 0x01
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	9a 81       	ldd	r25, Y+2	; 0x02
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	f1 f7       	brne	.-4      	; 0x3b64 <APP_enuActivation+0x706>
    3b68:	9a 83       	std	Y+2, r25	; 0x02
    3b6a:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(6000);
						counter = 0;
    3b6c:	10 92 0e 01 	sts	0x010E, r1
    3b70:	4c cd       	rjmp	.-1384   	; 0x360a <APP_enuActivation+0x1ac>

					goto Enter;
				}
				entranceFlag=1;
		}
}
    3b72:	cc 5a       	subi	r28, 0xAC	; 172
    3b74:	df 4f       	sbci	r29, 0xFF	; 255
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	1f 91       	pop	r17
    3b86:	0f 91       	pop	r16
    3b88:	08 95       	ret

00003b8a <Timer_enuActivation>:

volatile void Timer_enuActivation(void)
{
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
	milliseconds += 16; // 16 is the final calculation of using timer 0 with prescaler 1024
    3b92:	80 91 0a 01 	lds	r24, 0x010A
    3b96:	90 91 0b 01 	lds	r25, 0x010B
    3b9a:	40 96       	adiw	r24, 0x10	; 16
    3b9c:	90 93 0b 01 	sts	0x010B, r25
    3ba0:	80 93 0a 01 	sts	0x010A, r24
	if(activeTimer){
    3ba4:	80 91 0d 01 	lds	r24, 0x010D
    3ba8:	88 23       	and	r24, r24
    3baa:	59 f0       	breq	.+22     	; 0x3bc2 <Timer_enuActivation+0x38>
		milliseconds = 0; //Reseted to make the timer delay for full 4sec
    3bac:	10 92 0b 01 	sts	0x010B, r1
    3bb0:	10 92 0a 01 	sts	0x010A, r1
		DIO_enuSetPinValue(MOTOR_PORT,MOTOR_PIN,DIO_u8HIGH); // turn on motor and will not be off till the 4 sec is completed below
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	62 e0       	ldi	r22, 0x02	; 2
    3bb8:	41 e0       	ldi	r20, 0x01	; 1
    3bba:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
		activeTimer = 0; // reset flag so that we not enter the condition again and reset the timer again
    3bbe:	10 92 0d 01 	sts	0x010D, r1
	}

	    if (milliseconds >= 4000  )
    3bc2:	80 91 0a 01 	lds	r24, 0x010A
    3bc6:	90 91 0b 01 	lds	r25, 0x010B
    3bca:	2f e0       	ldi	r18, 0x0F	; 15
    3bcc:	80 3a       	cpi	r24, 0xA0	; 160
    3bce:	92 07       	cpc	r25, r18
    3bd0:	58 f0       	brcs	.+22     	; 0x3be8 <Timer_enuActivation+0x5e>
	    {
	        DIO_enuSetPinValue(MOTOR_PORT,MOTOR_PIN,DIO_u8LOW); ///stop motor after the 4 sec is completed
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	62 e0       	ldi	r22, 0x02	; 2
    3bd6:	40 e0       	ldi	r20, 0x00	; 0
    3bd8:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_enuSetPinValue>
	        milliseconds = 0; // Reset milliseconds counter
    3bdc:	10 92 0b 01 	sts	0x010B, r1
    3be0:	10 92 0a 01 	sts	0x010A, r1
	        activeTimer = 0;
    3be4:	10 92 0d 01 	sts	0x010D, r1
	    }
}
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	08 95       	ret

00003bee <__vector_11>:



ISR(VECT_TIMER0_OVF){
    3bee:	1f 92       	push	r1
    3bf0:	0f 92       	push	r0
    3bf2:	0f b6       	in	r0, 0x3f	; 63
    3bf4:	0f 92       	push	r0
    3bf6:	11 24       	eor	r1, r1
    3bf8:	2f 93       	push	r18
    3bfa:	3f 93       	push	r19
    3bfc:	4f 93       	push	r20
    3bfe:	5f 93       	push	r21
    3c00:	6f 93       	push	r22
    3c02:	7f 93       	push	r23
    3c04:	8f 93       	push	r24
    3c06:	9f 93       	push	r25
    3c08:	af 93       	push	r26
    3c0a:	bf 93       	push	r27
    3c0c:	ef 93       	push	r30
    3c0e:	ff 93       	push	r31
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
	Timer_enuActivation();
    3c18:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <Timer_enuActivation>
}
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	ff 91       	pop	r31
    3c22:	ef 91       	pop	r30
    3c24:	bf 91       	pop	r27
    3c26:	af 91       	pop	r26
    3c28:	9f 91       	pop	r25
    3c2a:	8f 91       	pop	r24
    3c2c:	7f 91       	pop	r23
    3c2e:	6f 91       	pop	r22
    3c30:	5f 91       	pop	r21
    3c32:	4f 91       	pop	r20
    3c34:	3f 91       	pop	r19
    3c36:	2f 91       	pop	r18
    3c38:	0f 90       	pop	r0
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	0f 90       	pop	r0
    3c3e:	1f 90       	pop	r1
    3c40:	18 95       	reti

00003c42 <TIMER0_enuInit>:
u8 TIMER0_enuInit(void)
{
    3c42:	df 93       	push	r29
    3c44:	cf 93       	push	r28
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
	/************* Watch window help **************
	 * FOC0	WGM00 COM01	COM00 WGM01	CS02 CS01 CS00
	 *   0	  0	    0 	  0	   0	 1	  0	   1	TCCR0 = 0x05 = 0000 0101
	 **********************************************/

	TCNT0 = 0; // reset the counter register to 0
    3c4a:	e2 e5       	ldi	r30, 0x52	; 82
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	10 82       	st	Z, r1

	TCCR0 = 0x05; //turn timer on with prescaler 1024
    3c50:	e3 e5       	ldi	r30, 0x53	; 83
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	85 e0       	ldi	r24, 0x05	; 5
    3c56:	80 83       	st	Z, r24

    TIMSK |= (1 << 0); // Enable timer overflow interrupt which is bit number 0 in the register
    3c58:	a9 e5       	ldi	r26, 0x59	; 89
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e9 e5       	ldi	r30, 0x59	; 89
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	81 60       	ori	r24, 0x01	; 1
    3c64:	8c 93       	st	X, r24


	return 0;
    3c66:	80 e0       	ldi	r24, 0x00	; 0
}
    3c68:	cf 91       	pop	r28
    3c6a:	df 91       	pop	r29
    3c6c:	08 95       	ret

00003c6e <__mulsi3>:
    3c6e:	62 9f       	mul	r22, r18
    3c70:	d0 01       	movw	r26, r0
    3c72:	73 9f       	mul	r23, r19
    3c74:	f0 01       	movw	r30, r0
    3c76:	82 9f       	mul	r24, r18
    3c78:	e0 0d       	add	r30, r0
    3c7a:	f1 1d       	adc	r31, r1
    3c7c:	64 9f       	mul	r22, r20
    3c7e:	e0 0d       	add	r30, r0
    3c80:	f1 1d       	adc	r31, r1
    3c82:	92 9f       	mul	r25, r18
    3c84:	f0 0d       	add	r31, r0
    3c86:	83 9f       	mul	r24, r19
    3c88:	f0 0d       	add	r31, r0
    3c8a:	74 9f       	mul	r23, r20
    3c8c:	f0 0d       	add	r31, r0
    3c8e:	65 9f       	mul	r22, r21
    3c90:	f0 0d       	add	r31, r0
    3c92:	99 27       	eor	r25, r25
    3c94:	72 9f       	mul	r23, r18
    3c96:	b0 0d       	add	r27, r0
    3c98:	e1 1d       	adc	r30, r1
    3c9a:	f9 1f       	adc	r31, r25
    3c9c:	63 9f       	mul	r22, r19
    3c9e:	b0 0d       	add	r27, r0
    3ca0:	e1 1d       	adc	r30, r1
    3ca2:	f9 1f       	adc	r31, r25
    3ca4:	bd 01       	movw	r22, r26
    3ca6:	cf 01       	movw	r24, r30
    3ca8:	11 24       	eor	r1, r1
    3caa:	08 95       	ret

00003cac <__udivmodsi4>:
    3cac:	a1 e2       	ldi	r26, 0x21	; 33
    3cae:	1a 2e       	mov	r1, r26
    3cb0:	aa 1b       	sub	r26, r26
    3cb2:	bb 1b       	sub	r27, r27
    3cb4:	fd 01       	movw	r30, r26
    3cb6:	0d c0       	rjmp	.+26     	; 0x3cd2 <__udivmodsi4_ep>

00003cb8 <__udivmodsi4_loop>:
    3cb8:	aa 1f       	adc	r26, r26
    3cba:	bb 1f       	adc	r27, r27
    3cbc:	ee 1f       	adc	r30, r30
    3cbe:	ff 1f       	adc	r31, r31
    3cc0:	a2 17       	cp	r26, r18
    3cc2:	b3 07       	cpc	r27, r19
    3cc4:	e4 07       	cpc	r30, r20
    3cc6:	f5 07       	cpc	r31, r21
    3cc8:	20 f0       	brcs	.+8      	; 0x3cd2 <__udivmodsi4_ep>
    3cca:	a2 1b       	sub	r26, r18
    3ccc:	b3 0b       	sbc	r27, r19
    3cce:	e4 0b       	sbc	r30, r20
    3cd0:	f5 0b       	sbc	r31, r21

00003cd2 <__udivmodsi4_ep>:
    3cd2:	66 1f       	adc	r22, r22
    3cd4:	77 1f       	adc	r23, r23
    3cd6:	88 1f       	adc	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	1a 94       	dec	r1
    3cdc:	69 f7       	brne	.-38     	; 0x3cb8 <__udivmodsi4_loop>
    3cde:	60 95       	com	r22
    3ce0:	70 95       	com	r23
    3ce2:	80 95       	com	r24
    3ce4:	90 95       	com	r25
    3ce6:	9b 01       	movw	r18, r22
    3ce8:	ac 01       	movw	r20, r24
    3cea:	bd 01       	movw	r22, r26
    3cec:	cf 01       	movw	r24, r30
    3cee:	08 95       	ret

00003cf0 <__divmodsi4>:
    3cf0:	97 fb       	bst	r25, 7
    3cf2:	09 2e       	mov	r0, r25
    3cf4:	05 26       	eor	r0, r21
    3cf6:	0e d0       	rcall	.+28     	; 0x3d14 <__divmodsi4_neg1>
    3cf8:	57 fd       	sbrc	r21, 7
    3cfa:	04 d0       	rcall	.+8      	; 0x3d04 <__divmodsi4_neg2>
    3cfc:	d7 df       	rcall	.-82     	; 0x3cac <__udivmodsi4>
    3cfe:	0a d0       	rcall	.+20     	; 0x3d14 <__divmodsi4_neg1>
    3d00:	00 1c       	adc	r0, r0
    3d02:	38 f4       	brcc	.+14     	; 0x3d12 <__divmodsi4_exit>

00003d04 <__divmodsi4_neg2>:
    3d04:	50 95       	com	r21
    3d06:	40 95       	com	r20
    3d08:	30 95       	com	r19
    3d0a:	21 95       	neg	r18
    3d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d0e:	4f 4f       	sbci	r20, 0xFF	; 255
    3d10:	5f 4f       	sbci	r21, 0xFF	; 255

00003d12 <__divmodsi4_exit>:
    3d12:	08 95       	ret

00003d14 <__divmodsi4_neg1>:
    3d14:	f6 f7       	brtc	.-4      	; 0x3d12 <__divmodsi4_exit>
    3d16:	90 95       	com	r25
    3d18:	80 95       	com	r24
    3d1a:	70 95       	com	r23
    3d1c:	61 95       	neg	r22
    3d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d20:	8f 4f       	sbci	r24, 0xFF	; 255
    3d22:	9f 4f       	sbci	r25, 0xFF	; 255
    3d24:	08 95       	ret

00003d26 <__prologue_saves__>:
    3d26:	2f 92       	push	r2
    3d28:	3f 92       	push	r3
    3d2a:	4f 92       	push	r4
    3d2c:	5f 92       	push	r5
    3d2e:	6f 92       	push	r6
    3d30:	7f 92       	push	r7
    3d32:	8f 92       	push	r8
    3d34:	9f 92       	push	r9
    3d36:	af 92       	push	r10
    3d38:	bf 92       	push	r11
    3d3a:	cf 92       	push	r12
    3d3c:	df 92       	push	r13
    3d3e:	ef 92       	push	r14
    3d40:	ff 92       	push	r15
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	cd b7       	in	r28, 0x3d	; 61
    3d4c:	de b7       	in	r29, 0x3e	; 62
    3d4e:	ca 1b       	sub	r28, r26
    3d50:	db 0b       	sbc	r29, r27
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	f8 94       	cli
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	09 94       	ijmp

00003d5e <__epilogue_restores__>:
    3d5e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d60:	39 88       	ldd	r3, Y+17	; 0x11
    3d62:	48 88       	ldd	r4, Y+16	; 0x10
    3d64:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d66:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d68:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d70:	b9 84       	ldd	r11, Y+9	; 0x09
    3d72:	c8 84       	ldd	r12, Y+8	; 0x08
    3d74:	df 80       	ldd	r13, Y+7	; 0x07
    3d76:	ee 80       	ldd	r14, Y+6	; 0x06
    3d78:	fd 80       	ldd	r15, Y+5	; 0x05
    3d7a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d7c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d7e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d80:	b9 81       	ldd	r27, Y+1	; 0x01
    3d82:	ce 0f       	add	r28, r30
    3d84:	d1 1d       	adc	r29, r1
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
    3d8a:	de bf       	out	0x3e, r29	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	ed 01       	movw	r28, r26
    3d92:	08 95       	ret

00003d94 <_exit>:
    3d94:	f8 94       	cli

00003d96 <__stop_program>:
    3d96:	ff cf       	rjmp	.-2      	; 0x3d96 <__stop_program>
